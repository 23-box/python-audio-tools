* DONE Fix WAVE/MP3 formats to support MP3 audio in a WAVE container
  Instead of WaveAudio generating a nasty "compression not supported" error,
  its is_type() classmethod should return False.
  And, MP3Audio's is_type() classmethod should check for MP3 compressed
  RIFF WAVE containers.
  This isn't likely to mess up decoding, but may confuse ID3 tagging.
* DONE Allow file template to be specified on the command line
  When making new files with track2track, cd2track, etc.
* DONE Update the website with the latest documentation
* DONE Allow a unified %(album_track_number)s file template field
  If there's no album number, it's simply 2 digits of track number.
  Otherwise, it's a combination of the two fields.
  For example, album_number = 2 and track_number = 13 results in
  "213" for a value.
* DONE Update trackcat to take a cuesheet argument when outputting FLACs
  Thus, one can perform:
  trackcat --cuesheet=file.cue file1.wav file2.wav file3.wav -t flac -o cd.flac
  which will embed "file.cue" into "cd.flac" using metaflac.
  Though no other format I'm aware of supports this kind of cuesheet handling,
  being able to easily build solid disc images of a single FLAC file
  is much of the reason for trackcat/tracksplit.
* DONE Don't remove undone tracklint entries from its undo DB
  Since its checksum will change anyway and no longer match,
  explicitly removing the entry is no longer necessary
* DONE Support FLAC padding
  If changes to FLAC metadata are small enough, write over the
  padding (if present) rather than rewrite the whole file - like metaflac.
  This approach should speed up tagging considerably.
* DONE Fix image support in ID3v2
  Very large images can take a very long time to load.
* DONE Fix programs to key on album number and track number
  Certain programs, such as trackcmp, work on tracks across two directories
  and key on track number to determine which to compare to which.
  These need to be updated to use both track number and album number.
* DONE Adjust wave conversions to use album number, if present
  For example, converting track_number 15 and album_number 2 to WAVE
  should make a file "track215.cdda.wav" which then properly converts
  back to track_number 15 and album_number 2 if read.
* DONE Improve XMCD handling
  Support for XMCD files often breaks down if one or more tracks
  are missing.
  In some cases, there's no fix to be had (track2xmcd)
  but in most instances it should be made to work correctly.
* DONE Perform type inference wherever possible
  Anything with a single output file (trackcat and record2track)
  should be able to infer its output type from the track suffix, if possible.
* DONE Add "comment" field support to all metadata types
  Don't forget to add unit tests for comment field.
** TODO Sort "comment" fields correctly across all metadata types
** TODO Add --comment support to tracktag
* DONE Fix ID3v2 image support to handle Unicode descriptions
  The current implementation falls down on UTF-16 input,
  but I should have a solution from the COMM frame handler.
* DONE Limit ID3v2.2/2.3 to UCS-2 encoding
  The current implementation treats UCS-2 the same as UTF-16.
  This needs to be fixed so that really high unicode characters
  (above U+FFFF) are replaced with something within spec.
* DONE Unify ID3v2 frame handling
  In the beginning, there were text frames and Everything Else.
  Text frames were unicode strings,
  and Everything Else was a binary string of whatever.
  Now that ID3 is cluttered with APIC frames and COMM frames that need
  special treatment, ID3v2 needs an overhaul to more resemble FlacMetaData.
** DONE Ensure unknown frames are displayed correctly
   Anything that's not text, images or comments should get some sort
   of proper display instead of a Python object string.
* DONE Add app testing to the unit test suite
  Though not everything is unit-testable
  (such as the CD handling programs or anything X11)
  a lot of the batch programs are to some degree:
- [X] coverdump
- [X] track2track
- [X] trackcat
- [X] trackcmp
- [X] tracklength
- [X] tracklint
- [X] trackrename
- [X] tracksplit
- [X] tracktag
* DONE Add verbosity levels to programs
  Every batch program should support a -V --verbose flag
  with options for "silence","normal" (the default) and "debug".
  Silence shuts off everything but error messages.
  Normal is standard output behavior.
  Debug for additional debugging output.
- [X] cd2track
- [X] cd2xmcd
- [X] coverdump
- [X] record2track
- [X] track2cd (this will need to forward verbosity to cdrecord)
- [X] track2track
- [X] track2xmcd
- [X] trackcmp
- [X] trackrename
- [X] tracksplit
- [X] tracktag
- [X] tracklint
* DONE Add compression percentage display to trackinfo
  Though not massively useful, it'd be neat to see just how
  compressed audio tracks are, as a percentage of their original size.
* DONE Add support for W??? frames to ID3v2
  The various W??? frames are really just URLs and don't need to
  be displayed as hex-encoded blobs.
* DONE Add CUE/TOC support to track2cd
  It should be possible to burn a selection of tracks, or a disc image,
  from a cuesheet with all its indexes/ISRC/catalog data intact
  by passing --cue to track2cd.
* DONE Unify CUE/TOC support
  Cuesheets and cdrdao TOC files are largely interchangeable.
  They both feature a listing of track offsets and, optionally,
  CD-TEXT data, ISRCs and so on.
  These formats should be unified such that any program will
  handle them both automatically.
- [X] tracksplit
- [X] trackcat
- [X] tracktag
** DONE Update docs to mention CUE/TOC interchangeability
- [X] tracksplit
- [X] trackcat
- [X] tracktag
** DONE Support cuesheet from FlacMetaData directly
   Since we're parsing CUE/TOC files anyway, this data can be used
   to build FLAC CUESHEET blocks directly instead of punting
   this task to metaflac.
** DONE Add unit tests for TOC/CUE files, as well as embedded FLAC cuesheets
* DONE Update copyright text for 2009
* DONE Preserve metadata when using trackcat
  Any fields shared by all tracks should be merged into metadata
  for the newly combined track.
* DONE Don't route data though WAVE files unless necessary
  Currently, track2track routes through WAVE if both ends happen to
  support foreign RIFF chunks, whether the files have such chunks or not.
  This behavior needs to be modified such that only source files
  which actually have foreign chunks, and a target format that supports them,
  results in a pass through RIFF WAVE.
* DONE Convert editxmcd to PyGTK
  Although the dialog(1)-based version works in terminals and is curses-based,
  it's extremely hokey, error-prone and doesn't support any cut & paste.
  This needs to be reimplemented in PyGTK (since coverview already uses it)
  and made into a stable app someone would want to use.
** DONE Update XMCD support
   The current handling of XMCD files treats them only as very primative
   AlbumMetaData implementations.  This must be updated into something
   round-trippable if editxmcd is to be modernized.
*** DONE Add XMCD unit tests
*** DONE Update XMCD API documentation
* DONE Require Python 2.5
  Since Python 2.4 is in bugfix-only mode and barely supported,
  it's best to move the minimum version to Python 2.5 or better
  (which has already been superceded by Python 2.6).
  This reduces the amount of Python versions to test on
  and allows the use of more modern Python features which
  makes the code less clunky.
** TODO Update documentation to mention Python 2.5 requirement.
* DONE Expand WavPack's APEv2 tag coverage
  WavPack's official specification defines APEv2 tags such as
  "Cuesheet" and "Cover Art" which the APEv2 standard does not.
  It would be helpful to make WavPack's APEv2 tags a superset of regular APEv2.
** DONE Add image support to WavePackAPEv2
** DONE Add cuesheet support to WavePackAPEv2
* DONE Build unified cuesheet interface
  Once both FLAC and WavPack support embedded cuesheets,
  there will need to be a unified interface to support them.
  I expect this will be a simple pair of get_cuesheet/set_cuesheet
  methods, probably attached to the AudioFiles themselves
  rather than to MetaData objects.
** DONE Alter FLAC-specific cuesheet documentation to be more general
** DONE Ensure cuesheets are transferred properly when transcoding
** DONE Update trackcat to use the interface
** DONE Update tracksplit to use the interface
** DONE Update track2cd to use the interface
** DONE Document cuesheet interface
** DONE Add unit tests for embedded cuesheets across all formats
** DONE Add cuesheet import option to tracktag
   This can also use the --cue flag,
   for consistency with other image-handling programs like tracksplit.
   If given with a single, album-length track, --cue will import a cuesheet.
   If given with multiple tracks or a single track that's too short,
   --cue will function like --xmcd and act as a metadata source.
** DONE Update track2xmcd to support getting an XMCD file from CD image
* DONE Convert to Muspack SV8
  Now that Musepack SV8 is finalized, it should be the new default.
  The old SV7 command-line tools aren't well supported and don't
  seem to work outside of x86 platforms.
  SV7 streams are, in theory, backwards compatible so switching
  shouldn't be a problem.
* DONE Update coverview to look more standard
  It's currently a haphazard assortment of widgets
  rather than anything like a proper GTK app.
  It should be tweaked to look better.
* DONE Improve transcoding robustness
  Just about all of the to_pcm() and from_pcm() methods expect
  that their subprocess calls will work as expected.
  Though rare in practice, these need to be checked in case
  the child processes fail for any reason.
** DONE Check for invalid input/output files/permissions errors
   If an output file can't be read/written to for some reason
   (invalid permissions, etc.) generate a proper error message
   instead of throwing ugly IOExceptions or confusing errors.
- [X] cd2track
- [X] cd2xmcd
- [X] coverdump
- [X] editxmcd
- [X] record2track
- [X] track2cd
- [X] track2track
- [X] track2xmcd
- [X] trackcat
- [X] trackcmp
- [X] trackinfo
- [X] tracklength
- [X] tracklint
- [X] trackplay
- [X] trackrename
- [X] tracksplit
- [X] tracktag
* DONE Make text output consistent
  Currently, command-line programs generate output using a
  selection of scattered print statements - often accompanied by
  if blocks when verbosity is indicated - and haphazardly
  filtered through unicode.
  This should be replaced by a unified message system similar
  to Python's built-in logging module which can abstract away
  these difficulties.
** DONE Convert tty output to gettext-based strings
   This will not only make output messages more consistent across the tools,
   but will also allow for foreign language translations in the future.
- [X] cd2track
- [X] cd2xmcd
- [X] coverdump
- [X] record2track
- [X] track2cd
- [X] track2track
- [X] track2xmcd
- [X] trackcat
- [X] trackcmp
- [X] trackinfo
- [X] tracklength
- [X] tracklint
- [X] trackplay
- [X] trackrename
- [X] tracksplit
- [X] tracktag
*** DONE Convert output from audiotools module to gettext-based strings
- [X] __aiff__.py
- [X] __ape__.py
- [X] __au__.py
- [X] cue.py
- [X] __flac__.py
- [X] __freedb__.py
- [X] __id3__.py
- [X] __id3v1__.py
- [X] __image__.py
- [X] __init__.py
- [X] __m4a__.py
- [X] __mp3__.py
- [X] __musepack__.py
- [X] __speex__.py
- [X] toc.py
- [X] __vorbiscomment__.py
- [X] __vorbis__.py
- [X] __wavpack__.py
- [X] __wav__.py
** DONE Add unit tests for tty output
   All programs which generate output should be unit tested
   so that all code paths are assured of printing the messages they're
   supposed to print, at the streams they're supposed to print on,
   and in the proper encoding settings.
- [X] coverdump
- [X] track2track
- [X] track2xmcd
- [X] trackcat
- [X] trackcmp
- [X] trackinfo
- [X] tracklength
- [X] tracklint
- [X] trackrename
- [X] tracksplit
- [X] tracktag
** DONE Convert --help output to gettext-based strings
** DONE Convert GUI programs to gettext-based strings
- [X] coverview
- [X] editxmcd
** DONE Convert "Usage" output to gettext-based strings
* DONE Update tracksplit's man page
  It now supports more of track2track's options
* DONE Support total tracks/total albums metadata fields
** DONE Add support for fields in the metadata tags
- [X] Add support in Vorbis Comments
- [X] Add support in ID3v2
- [X] Add support in M4A
- [X] Add support in APEv2
** DONE Add support in utilities
- [X] Add support in tracktag
- [X] Add support in cd2track
- [X] Add support in tracksplit
- [X] Add support in trackcat
** DONE Add unit tests
** DONE Add fields to --format output
** DONE Update man pages with fields information
* DONE Integrate better MetaData merging
  There's a few areas in which MetaData from multiple sources must
  be merged in an intelligent manner,
  such as where tracksplit takes a source track an XMCD file.
  Now that a preliminary MetaData.merge() classmethod is in place,
  this process must be integrated consistently.
- [X] track2track
- [X] trackrename
- [X] tracksplit
- [X] tracktag
** DONE Add unit tests for MetaData merging process
- [X] track2track
- [X] trackrename
- [X] tracksplit
- [X] tracktag
* DONE Improve M4A metadata handling
** DONE Make M4A metadata updating less destructive
  Like FLAC, not all fields need to be wiped out when overwriting
  old metadata with new.
** DONE Add more M4A-specific unit tests
* DONE Add more system information to audiotools-config
  All BIN-referenced binaries should be accounted for.
  Thumbnailing status and requirements should be shown.
* DONE Add cdinfo utility
  Analagous to trackinfo, but for an inserted CD.
  This would be a better location for cd2xmcd's "-i" option.
** DONE Add cdinfo man page
** DONE Link cdinfo man page to other utility man pages
* DONE Add manual page for audiotools.cfg
  It'll be easier to check what the options are from a man page
  rather than having to check the website or PDF doc.
* DONE Convert vorbiscomment dependency to Python
  This would remove the last app-based MetaData-setting utility
  and may pave the way for adding cover art to Ogg Vorbis
  (assuming I can find the standard for a secondary stream of image data)
* DONE Add metadata deletion capability
  It would be helpful to have the low-level capability of deleting
  either part of a MetaData tag or the entire tag altogether.
  For example, deleting the "track_name" field would delete
  a Vorbis comment's "TITLE" field.
  Or, deleting the MetaData from MP3 would remove all the ID3v2/ID3v1 tags.
** DONE Add delattr to ID3v1
* DONE Integrate pyconstruct as a submodule
* DONE Add undo capability to editxmcd
* DONE Add --cue option to track2xmcd
  One should be able to pull metadata from CD images
  without having to embed the cuesheet.
** DONE Add unit tests for track2xmcd's --cue option
** DONE Update man page
* DONE Group --help output more intelligently
  For tools with a large number of options (such as track2track or tracktag)
  the --help output is particularly jumbled.
  Use more of optparse's features to make this output clearer.
- [X] cd2track
- [X] cd2xmcd
- [X] track2track
- [X] track2xmcd
- [X] tracksplit
- [X] tracktag
* DONE Check for FLAC metadata chunk overflow
  Although APEv2 and ID3 tags support very large objects (hundreds of MB),
  FLAC metadata chunks have a maxmimum of about 16MB per chunk,
  which may be hit accidentally.
* DONE Fix or replace Python's built-in aifc module
  The current implementation suffers from bugs.
** DONE Document AIFF better
* DONE Add MusicBrainz support
  It would be helpful to have external metadata support beyond FreeDB,
  since FreeDB is very primitive.
** DONE Ensure that MusicBrainz is interchangeable with FreeDB/XMCD
*** DONE Unify track2xmcd/track2mb, cd2xmcd/cd2mb
    Based on preliminary testing, MusicBrainz's output is better than FreeDB's
    but its album coverage is not as broad.
    In addition, nobody wants to run their albums through two separate tools
    in order to extract metadata for tagging.  The best solution is
    for tools to try both and output the one that's most complete.
*** DONE Extend editxmcd to MusicBrainz XML
    Although editxmcd was originally designed specifically for XMCD files
    and MusicBrainz's XML format differs radically, no one should have to
    know whether an album metadata file is one or the other.
    Therefore, editxmcd should be extended with additional fields
    to handle XML backend data if necessary.
*** DONE Handle multiple Release entries with single Disc ID
*** DONE Allow MusicBrainz XML output for new editxmcd files
    FreeDB output should also be an option, however.
** DONE Add MusicBrainz protocol/format documentation
** DONE Add MusicBrainz-specific unit tests
- [X] track2track
- [X] track2xmcd
- [X] trackrename
- [X] tracksplit
- [X] tracktag
** DONE Update --help text to indicate MusicBrainz compatibility
- [X] cd2xmcd
- [X] editxmcd
- [X] track2track
- [X] track2xmcd
- [X] trackrename
- [X] tracksplit
- [X] tracktag
** DONE Update man pages to indiciate MusicBrainz compatibility
- [X] cd2xmcd
- [X] editxmcd
- [X] track2track
- [X] track2xmcd
- [X] trackrename
- [X] tracksplit
- [X] tracktag
** DONE Update documentation with MusicBrainz config file fields
** DONE Ensure missing XML fields are handled correctly
   The MusicBrainz XML spec allows most fields to be missing altogether
   (such as <title>).  editxmcd should add these fields in the proper place
   if necessary.
*** DONE Add unit tests for improperly reordered XML fields
* DONE Ensure .glade files are found
  Not all systems place Python data files in the same locations.
* TODO Ensure non-image cuesheets are handled properly
  There are 4 different types of cuesheets,
  1 single file type and 3 different multiple file variants.
  We should be able to translate between them if necessary, and if possible.
* TODO Replace magic numbers with named constants
  There's still a few instances of magic numbers in use,
  in the __flac__.py module, for instance.
* TODO Add support for genre tag?
  I'm not a big fan of the genre tag.
  Unlike track number, album name, ISRC, etc. in which a value
  can be reliably determined from the source material (e.g. back of the CD),
  genre is akin to a "rating" tag. Its value varies from person to person
  and this makes it less valuable for archival purposes.

  In addition, the genre tag itself is implemented in incompatible ways.
  APEv2 uses a chunk of text, ID3v1 uses an integer representing one
  of many designated genre labels, ID3v2 uses a mix of genre byte
  and/or text string, and so on.

  That said, the genre field shows up in a lot of players.
  So, some grudging support for it would probably be appreciated.
* TODO More graceful handling of broken files
  A lot of the track handlers assume that once the start of the file is good,
  the rest of it is following the spec.  This is not always the case.
  There needs to be sanity checks such that if a file is wildly wrong,
  sensible errors result rather than throwing an ugly pyconstruct exception.
* TODO Add more examples
  A lot of handy new features aren't documented with examples and walkthroughs.
  Examples to add include:
- [X] a full multi-CD example, detailing the use of --album-number
- [X] an image embedding walkthrough
- [ ] examples of how -d,--format,-o work together for different results
- [X] a CD image creation, splitting, burning example involving TOC/CUE files
- [X] an XMCD walkthrough with fetching, editing and tagging
* TODO Add support for System->cdrom_offset
  This will automatically apply offset samples when reading CDs
  so that rips will have the appropate amount of null samples.
** DONE Add offset support when ripping
   Automatically apply the configfile's cdrom_offset value to tracks
   during reading.
** TODO Add offset support when burning?
   cd2track and track2cd should round-trip properly
   If cd2track applies a sample offset when reading, does track2cd
   need to apply that same offset when writing?
   One would presume a drive's read offset and write offset are the same,
   but that may not be correct.
* TODO Add better progress indicator to coverview
  Perhaps performing cover opening in a separate thread
  would make the interface more responsive when opening tracks
  containing many large images.
* TODO Add general-purpose track conversion short-circuiting
  Certain type conversions should pass through specialized routines
  rather than be piped through PCM conversion.
  This is a generalization of the messy to/from_wave() situation
  and allows for smarter, lossless conversion in certain situations.
  For example, going from FLAC to Ogg FLAC should theoretically involve
  wrapping up FLAC frames rather than re-encoding.
  Or going from AAC to M4A should involve simple wrapper manipulation.
* TODO Convert TOC and CUE handling to proper grammars
  Although the current ad-hoc method works in most cases,
  it would be better to use a more formal method to parse these files
  which can be proven to handle all legal files.
  I expect this will require PLY or some similar lexx/yacc mechanism
  which I'll bundle to avoid adding any extra depencies.
* TODO Add Python3 support
  It would be useful to have a build which functions properly on
  Python3 when run through "2to3".
  This requires updating C code and patching any bugs in the unit tests.
** TODO Patch Construct for Python3
   Since pyconstruct hasn't been updated in almost 2 years,
   I'll likely have to update it myself to ensure it'll run on Python3.
* TODO Add C-based FLAC decoder
** DONE Add a variety of unit tests
** TODO Handle Rice escape codes
   Not sure how to test these, but they should be handled properly.
** TODO Ensure decoder raises the proper exceptions
* TODO Add C-based FLAC encoder
** DONE Use VERBATIM subframes when necessary
** DONE Add significant initial padding blocks
   This will save a lot of time during retagging after FLAC creation
** DONE Add a variety of unit tests
   - [X] test_stream.sh
   - [X] test_flac.sh
** DONE Convert i_array size and data types to typedefs
** DONE Convert f_array size and data types to typedefs
** DONE Add more comprehensive encoding documentation
** DONE Add a variety of assert() statements
   As with unit tests, these ensure everything is working during testing
   without a performance penalty at runtime.
** DONE Handle foreign RIFF chunks
** DONE Ensure FLACs work on a variety of other decoders
   Although decoding properly on the reference decoder *should* guarantee
   the file works everywhere, the only way to be certain is to test it.
** DONE Ensure encoder raises the proper exceptions
** DONE Support Rice2 partitions?
   The reference encoder uses these for more efficient handling of 24-bit audio
   but I'm not sure they're strictly necessary for my more basic encoder.
** DONE Support wasted-bits-per-sample?
   I don't think I've ever seen these used on actual audio data
   that isn't artificial and hasn't been processed specifically for its use.
   As with Rice2, it's something that may get added later.
** DONE Handle multi-channel PCM data correctly
   Anything higher than 2 channels needs to set a channel mask
   and the vorbis comment to the proper value.
   I expect this will be a long-term project
   coinciding with re-engineering the to_pcm()/from_pcm() methods.
** DONE Remove external MD5 dependency
** TODO Generate SEEKTABLE blocks
* DONE Convert to_pcm()/from_pcm() to FrameList-based I/O
  Passing specifically-sized blobs of binary data between conversion
  routines worked well when those routines are little more than
  subprocess black-boxes.  However, this approach works less well
  whenever actual sample values are required, or when processing is needed.
  In those cases, going from integers to strings, converting the strings
  back to integers for processing, then bouncing them into strings once
  again becomes needless work.
  A more sensible approach is to keep all data as FrameList-compatible
  objects (stored as C-based lists of int32s behind-the-scenes)
  and convert that data to/from strings only at the beginning and end
  of processing.
** DONE Build C-based audiotools.pcm.FrameList object
   This needs to closely match audiotools.FrameList's functionality
   and combine all the PCM conversion features from audiotools.pcmreader
*** DONE Integrate audiotools.pcm.FrameList with i_array structures
*** DONE Make audiotools.pcm.FrameList into a standalone object
    So standalone test codecs can use them, such as "flacenc"
*** DONE Unit test audiotools.pcm.FrameList
** DONE Convert FLAC encoder/decoder to use FrameList objects
   - [X] flacenc
   - [X] audiotools.decoders.FlacDecoder
   - [X] audiotools.encoders.encode_flac
** DONE Convert to_pcm()/from_pcm() routines to use FrameList objects
   - [X] AAC
   - [X] AIFF
   - [X] Sun AU
   - [X] FLAC
   - [X] M4A
   - [X] MP2
   - [X] MP3
   - [X] Ogg FLAC
   - [X] Ogg Speex
   - [X] WAVE
   - [X] WavPack
** DONE Convert CDTrackReader/OffsetCDTrackReader to use FrameList objects
** DONE Convert PCMConverter to use FrameList objects
** DONE Convert ReplayGainReader to use FrameList objects
** DONE Ensure integrated FrameList passes all unit tests
** DONE Remove deprecated audiotools.FrameList object
** DONE Remove deprecated pcmstream.PCMStreamReader object
** DONE Convert pcmstream module to resample module
** DONE Avoid importing audiotools.pcm so often
   Other C libraries often import audiotools.pcm via Python callbacks
   This library importing should be cached when possible.
   - [X] cdiomodule
   - [X] pcmreader
   - [X] replaygain
   - [X] resample
** DONE Check for memory leaks
** DONE Add FrameList and FloatFrameList programming documentation
** DONE Remove .copy() method
   Since FrameLists are now immutable, there's no need for it
** DONE Make pcm objects self-documenting
   For example, their methods and functions should give useful info
   when checked with "help()"
* DONE Add native ReplayGain handling routines
** DONE Add native ReplayGain handling to FlacAudio/OggFlacAudio
** DONE Ensure add_replay_gain()'s exceptions are caught
   Errors during calculation may raise ValueError,
   which must be caught anywhere the function is called
** DONE Add ReplayGain unit tests
** DONE Ensure ReplayGain works properly on 8bps and 24bps output
** DONE Ensure ReplayGain is applied consistently
   Although cd2track and tracksplit are guaranteed
   to generate only one album at a time, track2track and tracktag are not.
   If multiple albums are applied gain at once,
   add_replay_gain must be called on an album-by-album basis
   rather than on the entire set.
** DONE Double-check ReplayGainReader
   Ensure its output is consistent with other implementations.
* DONE Fix multi-channel audio handling
  It's important that channel mapping information be preserved
  when transcoding between sources with 3+ channels.
  This likely means another flag for PCMReader so that
  from_pcm() can build a file with the proper channel mask set.
  However, it may also be necessary to build some sort of
  channel reordering mechanism in the event that formats differ
  on how channels are to be ordered in the file.
** Channel Counts and Ordering
| Format     | Maximum Channels | Ordering               |
|------------+------------------+------------------------|
| AAC        |               48 | stereo-only (via faac) |
| AIFF       |             2^16 | predefined             |
| Sun AU     |             2^32 | mostly undefined       |
| FLAC       |                8 | as WAVE                |
| M4A        |               48 | as WAVE?               |
| MP2        |                2 | stereo-only            |
| MP3        |                2 | stereo-only            |
| Musepack   |                2 | stereo-only            |
| Ogg FLAC   |                8 | as WAVE                |
| Ogg Vorbis |              255 | predefined             |
| Ogg Speex  |             2^32 | stereo-only            |
| RIFF WAVE  |             2^16 | predefined             |
| WavPack    |               16 | as WAVE                |
|------------+------------------+------------------------|
** DONE Fix AudioFile definitions to support channel_mask()
   - [X] AACAudio
   - [X] AiffAudio
   - [X] AuAudio
   - [X] FlacAudio
   - [X] M4AAudio
   - [X] MP2Audio
   - [X] MP3Audio
   - [X] OggFlacAudio
   - [X] VorbisAudio
   - [X] SpeexAudio
   - [X] WaveAudio
   - [X] WavPackAudio
** DONE Fix to_pcm() methods to support channel_mask
   - [X] AACAudio
   - [X] AiffAudio
   - [X] AuAudio
   - [X] FlacAudio
   - [X] M4AAudio
   - [X] MP2Audio
   - [X] MP3Audio
   - [X] OggFlacAudio
   - [X] VorbisAudio
   - [X] SpeexAudio
   - [X] WaveAudio
   - [X] WavPackAudio
** DONE Fix from_pcm() classmethods to support channel_mask
   - [X] AACAudio
   - [X] AiffAudio
   - [X] AuAudio
   - [X] FlacAudio
   - [X] M4AAudio
   - [X] MP2Audio
   - [X] MP3Audio
   - [X] OggFlacAudio
   - [X] VorbisAudio
   - [X] SpeexAudio
   - [X] WaveAudio
   - [X] WavPackAudio
** DONE Fix alternate PCMReaders to support channel_mask
   - [X] BufferedPCMReader
   - [X] PCMConverter
   - [X] ReplayGainReader
   - [X] CDTrackReader
   - [X] OffsetCDTrackReader
   - [X] PCMCat
** DONE Handle undefined channel masks in a sane way
*** DONE Fix to_pcm() methods to output undefined ChannelMasks
    If a format has not defined channel assignments for a given
    channel count, its to_pcm() method should return undefined ChannelMasks.
    - [X] AACAudio
    - [X] AiffAudio
    - [X] AuAudio
    - [X] FlacAudio
    - [X] M4AAudio
    - [X] MP2Audio
    - [X] MP3Audio
    - [X] OggFlacAudio
    - [X] VorbisAudio
    - [X] SpeexAudio
    - [X] WaveAudio
    - [X] WavPackAudio
*** DONE Fix from_pcm() classmethods to accept undefined ChannelMasks
    So long as the number of channels is acceptable,
    audio formats are free to place undefined ChannelMasks
    in whatever arrangement they'd like.
    - [X] AACAudio
    - [X] AiffAudio
    - [X] AuAudio
    - [X] FlacAudio
    - [X] M4AAudio
    - [X] MP2Audio
    - [X] MP3Audio
    - [X] OggFlacAudio
    - [X] VorbisAudio
    - [X] SpeexAudio
    - [X] WaveAudio
    - [X] WavPackAudio
** DONE Unit test multichannel encoding and channel_mask handling
*** DONE Ensure all AudioFile types have a working channel_mask() method
    Even 2 channel audio should yield something valid.
*** DONE Ensure all to_pcm() methods yield a matching channel_mask attribute
*** DONE Ensure channel_mask is preserved between from_pcm(to_pcm()) calls
*** DONE Ensure channel_mask is preserved between to_wave()/from_wave() calls
*** DONE Ensure channels are actually stored in the proper order
    This is less of an issue for .wav, .flac, .oga or .wv
    which already store channels in RIFF WAVE order
    and more of an issue for Ogg Vorbis and other formats that do not.
*** DONE Ensure UnsupportedChannelMask is raised when necessary
    This includes calls to from_pcm() and from_wave()
** DONE Ensure PCMReader.channel_mask is always an integer
* TODO Get coverview and editxmcd working on Mac OS X
  Preferably without falling back to Tkinter
* TODO Perform code review of C-based extensions
** TODO audiotools.cdio
** TODO audiotools.decoders
** TODO audiotools.encoders
** TODO audiotools.pcm
** TODO audiotools.replaygain
** TODO audiotools.resample
* DONE Fix the unit test error messages
* DONE Make the programming documentation web-capable
   It should render consistently with the regular Python reference docs
   and be placed both in the source tree and on the website
   for better accessability.
** DONE Document audiotools
    - [X] AudioFile
    - [X] BufferedPCMReader
    - [X] ChannelMask
    - [X] ExecQueue
    - [X] Image
    - [X] MetaData
    - [X] PCMConverter
    - [X] PCMReader
    - [X] PCMCat
    - [X] ReorderedPCMReader
    - [X] ReplayGain
    - [X] ReplayGainReader
    - [X] Messenger
    - [X] AlbumMetaData
    - [X] CDTrackLog
    - [X] CDDA
    - [X] CDTrackReader
    - [X] calculate_replay_gain
    - [X] filename_to_type
    - [X] find_glade_file
    - [X] group_tracks
    - [X] open
    - [X] open_directory
    - [X] open_files
    - [X] pcm_cmp
    - [X] pcm_split
    - [X] read_metadata_file
    - [X] read_sheet
    - [X] stripped_pcm_cmp
    - [X] transfer_data
    - [X] transfer_framelist_data
    - [X] BIN
    - [X] TYPE_MAP
    - [X] VERSION
    - [X] AVAILABLE_TYPES
** DONE Document audiotools.pcm
    - [X] FloatFrameList
    - [X] FrameList
    - [X] from_channels
    - [X] from_float_channels
    - [X] from_float_frames
    - [X] from_frames
    - [X] from_list
** DONE Document audiotools.resample
    - [X] Resampler
** DONE Document audiotools.replaygain
    - [X] ReplayGain
** DONE Document audiotools.cdio
    - [X] CDDA
    - [X] set_read_callback
** DONE Document audiotools.cue
    - [X] Cuesheet
    - [X] read_cuesheet
    - [X] CueException
** DONE Document audiotools.toc
    - [X] TOCFile
    - [X] read_tocfile
    - [X] TOCException
* TODO Make reference documentation render consistently
** TODO Ensure documents render in letter and A4 size
** TODO Add Creative Commons licensing to source code and doc itself
** DONE Basics
*** DONE Hexadecimal
*** DONE Endianness
*** DONE Character Encodings
*** DONE PCM
** DONE .wav
*** DONE the RIFF WAVE stream
*** DONE the fmt chunk
*** DONE the WAVEFORMATEXTENSIBLE fmt chunk
*** DONE the data chunk
*** DONE channel mapping
** TODO .aiff
*** TODO the AIFF stream
*** TODO the COMM chunk
**** TODO 80 bit IEEE standard 754 floating point
*** the SSND chunk
** TODO .au
*** TODO the AU stream
*** TODO the AU header
** DONE .flac
*** DONE the FLAC file stream
*** DONE FLAC metadata
**** DONE the PADDING metadata block
**** DONE the APPLICATION metadata block
**** DONE the SEEKTABLE metadata block
**** DONE the VORBIS_COMMENT metadata block
**** DONE the PICTURE metadata block
**** DONE the CUESHEET metadata block
*** DONE FLAC decoding
**** DONE the CONSTANT subframe
**** DONE the VERBATIM subframe
**** DONE the FIXED subframe
**** DONE the LPC subframe
**** DONE the Residual
***** DONE Rice Encoding
**** DONE Channels
**** DONE Wasted bits per sample
*** DONE FLAC encoding
**** DONE Metadata header
**** DONE the STREAMINFO metadata block
**** DONE Frame header
**** DONE Channel assignment
**** DONE Subframe header
**** DONE the CONSTANT subframe
**** DONE the VERBATIM subframe
**** DONE the FIXED subframe
**** DONE the LPC subframe
***** DONE Windowing
***** DONE Computing autocorrelation
***** DONE LP coefficient calculation
***** DONE Best order estimation
***** DONE Best order exhaustive search
***** DONE Quantizing coefficients
***** DONE Calculation Residual
**** DONE the Residual
***** DONE Residual Values
*** DONE the Checksums
**** TODO CRC-8
**** TODO CRC-16
** TODO .ape
*** TODO the Monkey's Audio stream
*** TODO the APE Descriptor
*** TODO the APE Header
*** TODO the APEv2 tag
*** TODO the APEv2 tag header/footer
*** TODO the APEv2 flags
** TODO .wv
*** TODO the WavPack file stream
*** TODO a WavPack block header
*** TODO a WavPack sub-block header
** TODO .mp3
*** DONE the MP3 file stream
*** DONE an MPEG frame header
**** DONE the Xing header
*** DONE the ID3v1 tag
**** DONE ID3v1
**** DONE ID3v1.1
*** TODO the ID3v2 tag
**** DONE the ID3v2 stream
**** DONE ID3v2.2
***** DONE the ID3v2.2 Header
***** DONE an ID3v2.2 Frame
***** DONE ID3v2.2 Frame IDs
***** DONE the PIC Frame
**** DONE ID3v2.3
***** DONE the ID3v2.3 Header
***** DONE an ID3v2.3 Frame
***** DONE ID3v2.3 Frame IDs
***** DONE the APIC Frame
**** TODO ID3v2.4
***** DONE the ID3v2.4 Header
***** DONE an ID3v2.4 Frame
***** DONE ID3v2.4 Frame IDs
***** DONE the APIC Frame
** TODO .ogg
*** DONE the Ogg file stream
*** DONE an Ogg Page
*** DONE Ogg packets
*** DONE the Identification packet
*** TODO the Comment packet
** TODO .spx
*** TODO the Header packet
*** TODO the Comment packet
** TODO .oga
*** TODO the Ogg FLAC file stream
*** TODO the STREAMINFO metadata packet
*** TODO the Metadata packets
** DONE .m4a
*** DONE the QuickTime file stream
*** DONE a QuickTime atom
*** DONE Container atoms
*** DONE M4A atoms
**** DONE the ftyp atom
**** DONE the mvhd atom
**** DONE the tkhd atom
**** DONE the mdhd atom
**** DONE the hdlr atom
**** DONE the smhd atom
**** DONE the dref atom
**** DONE the stsd atom
**** DONE the mp4a atom
**** DONE the stts atom
**** DONE the stsc atom
**** DONE the stsz atom
**** DONE the stco atom
**** DONE the meta atom
***** DONE the trkn sub-atom
***** DONE the disk sub-atom
** TODO .mpc
*** TODO Musepack SV7
**** TODO the Musepack SV7 file stream
**** TODO the Musepack SV7 header
*** TODO Musepack SV8
**** TODO the Musepack SV8 file stream
**** TODO Nut-encoded values
**** TODO the SH packet
**** TODO the SE packet
**** TODO the RG packet
**** TODO the EI packet
** TODO FreeDB
*** TODO Native Protocol
**** TODO the Disc ID
**** TODO Initial Greeting
**** TODO Client-Server Handshake
**** TODO Set Protocol Level
**** TODO Calculate Disc ID
**** TODO Query Database
**** TODO Read XMCD Data
**** TODO Close Connection
**** TODO List Genres
**** TODO List Mirrors
*** TODO Web Protocol
*** TODO XMCD
**** TODO BNF
** TODO MusicBrainz
*** TODO Searching Releases
**** TODO The Disc ID
**** TODO Server Query
**** TODO Release XML
*** TODO MusieBrainz XML
** TODO ReplayGain
*** TODO Applying ReplayGain
*** TODO Calculating ReplayGain
**** TODO the Equal Loudness Filter
     This should be re-documented to be closer to the actual implementation
***** TODO the Yule Filter
***** TODO the Buffer Filter
***** TODO a Filtering Example
**** TODO RMS Energy Blocks
**** TODO Statistical Processing and Calibration
** TODO References
