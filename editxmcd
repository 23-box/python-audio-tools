#!/usr/bin/python

#Audio Tools, a module and set of tools for manipulating audio data
#Copyright (C) 2007  Brian Langenberger

#This program is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2 of the License, or
#(at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA


import audiotools
import sys,subprocess,optparse,os.path



#asks for metadata from the user via the "dialog" program
#requires a list of track lengths (in CD frames)
#defaults are taken from an AlbumMetaData object, if present

#returns a list of AudioFile-compatible objects with set metadata
#or returns None if the user cancels
def get_metadata(track_lengths, album_meta_data=None):
    if (album_meta_data == None):
        album_meta_data = audiotools.AlbumMetaData(
            [audiotools.MetaData(track_number=i + 1) for i in
             xrange(len(track_lengths))])

    artist_name = audiotools.__freedb__.__most_numerous__(
        [m.artist_name for m in album_meta_data.values()])

    total_tracks = len(track_lengths)

    form = []

    form += ['--backtitle','XMCD Data']
    form += ['--inputbox','Album Name',str(8),str(1024),
             audiotools.__freedb__.__most_numerous__(
            [m.album_name for m in album_meta_data.values()])]

    form += ['--backtitle','XMCD Data']
    form += ['--inputbox','Artist Name',str(8),str(1024),
             artist_name]

    form += ['--backtitle','XMCD Data']
    form += ['--form','Track Names',
             str(18),str(60),str(total_tracks)]

    for i in xrange(total_tracks):
        form += ["Track %2.2d " % (i + 1), str(i + 1), str(1),
                 album_meta_data[i + 1].track_name,str(i + 1), str(12),
                 str(50), str(1024)]

    form += ['--backtitle','XMCD Data']
    form += ['--visit-items',
             '--form','Artist Names (if different)',
             str(18),str(60),str(total_tracks)]
    for i in xrange(total_tracks):
        if (album_meta_data[i + 1].artist_name != artist_name):
            form += ["Track %2.2d " % (i + 1), str(i + 1), str(1),
                     album_meta_data[i + 1].artist_name,str(i + 1), str(12),
                     str(50), str(1024)]
        else:
            form += ["Track %2.2d " % (i + 1), str(i + 1), str(1),
                     u"",str(i + 1), str(12),
                     str(50), str(255)]

    sub = subprocess.Popen([audiotools.BIN['dialog']] + form,
                           stderr=subprocess.PIPE)

    data = sub.stderr.read()
    sub.wait()
    
    try:
        (album,artist,track_names,track_artists) = data.split('\x09')
        album = album.decode('utf-8')
        artist = artist.decode('utf-8')
        track_names = [s.decode('utf-8') for s in 
                       track_names.split('\x0A')[0:-1]]
        track_artists = [s.decode('utf-8') for s in
                         track_artists.split('\x0A')[0:-1]]

        tracks = []

        for (tracknum, tracklength, trackname, trackartist) in zip(
            range(len(track_lengths)), track_lengths, 
            track_names, track_artists):
            if (trackartist.strip() == ""):  #no artist, so take default
                tracks.append(audiotools.DummyAudioFile(
                        tracklength,
                        audiotools.MetaData(track_name=trackname,
                                            track_number=tracknum + 1,
                                            album_name=album,
                                            artist_name=artist)))
            else:
                tracks.append(audiotools.DummyAudioFile(
                        tracklength,
                        audiotools.MetaData(track_name=trackname,
                                            track_number=tracknum + 1,
                                            album_name=album,
                                            artist_name=trackartist)))

        return tracks

    except ValueError:
        return None

def track_lengths_from_xmcd_file(filename):
    import re,string

    OFFSET = re.compile(r'#\s*\d+\s*')
    DISC_LENGTH = re.compile(r'#.*\d+ seconds\s*')

    f = open(filename,"r")
    offsets = []
    total_length = 0

    for line in f.readlines():
        if (OFFSET.match(line)):
            offsets.append(int(line.strip('#' + string.whitespace)))
        elif (DISC_LENGTH.match(line)):
            total_length = int(re.findall(r'\d+',line)[0])

    return [end - start for (start,end) in zip(
            offsets,offsets[1:] + [total_length * 75])]


if (__name__ == '__main__'):
    if (not audiotools.BIN.can_execute(audiotools.BIN['dialog'])):
        print >>sys.stderr,"*** 'dialog' executable required"
        sys.exit(1)
    
    parser = optparse.OptionParser(
        '%prog [-x XMCD file] [track 1] [track 2] ...',
        version="Python Audio Tools %s" % (audiotools.VERSION))
    parser.add_option('-x','--xmcd',action='store',
                      type='string',dest='xmcd')

    (options,args) = parser.parse_args()

    args = audiotools.open_files(args)

    if (options.xmcd == None):
        print >>sys.stderr,"*** An XMCD file is required"
        sys.exit(1)

    if (os.path.isfile(options.xmcd)):  #we're editing an existing file
        track_lengths = track_lengths_from_xmcd_file(options.xmcd)
        data = get_metadata(track_lengths,
                            audiotools.parse_xmcd_file(options.xmcd))
        
        if (data != None):
            xmcd_file = open(options.xmcd,"w")
            xmcd_file.write(audiotools.build_xmcd_file(data))
            print "* Wrote: %s" % (options.xmcd)
    elif (len(args) > 0):               #we're building a file from tracks
        metadata = [t.get_metadata() for t in args]
        track_lengths = [t.length() for t in args]

        if (None not in metadata):      #all the tracks have metadata
            data = get_metadata(track_lengths,
                                dict([(t.track_number(),
                                       t.get_metadata()) for t in args]))
        else:                           #at least one track doesn't
            data = get_metadata(track_lengths)
            
        if (data != None):
            xmcd_file = open(options.xmcd,"w")
            xmcd_file.write(audiotools.build_xmcd_file(data))
            print "* Wrote: %s" % (options.xmcd)
    else:                               #no tracks, no files, nowhere to go
        print >>sys.stderr,"*** Please specify audio tracks to build XMCD file"
        sys.exit(1)
    

