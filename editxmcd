#!/usr/bin/python

#Audio Tools, a module and set of tools for manipulating audio data
#Copyright (C) 2007-2009  Brian Langenberger

#This program is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2 of the License, or
#(at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

import sys
import os.path

try:
    import gtk
    import gtk.gdk
    import gtk.glade
    import gobject
    import pango
except ImportError:
    print >>sys.stderr,"*** PyGTK2 is required"
    sys.exit(1)

#import xmcd
import audiotools

#   columns
(
  COLUMN_NUMBER,
  COLUMN_NAME,
  COLUMN_EDITABLE
) = range(3)

class EditXMCD:
    #track_data is a track_id->(name,artist,extra) dict
    def __init__(self,xml):
        self.xml = xml

        # create tree view
        self.track_model = self.__create_model()
        treeview = xml.get_widget("track_names")
        treeview.set_model(self.track_model)
        treeview.set_rules_hint(True)
        treeview.get_selection().set_mode(gtk.SELECTION_SINGLE)
        self.__add_columns(treeview,"Name",self.on_field_edited)

        self.artist_model = self.__create_model()
        treeview = xml.get_widget("track_artists")
        treeview.set_model(self.artist_model)
        treeview.set_rules_hint(True)
        treeview.get_selection().set_mode(gtk.SELECTION_SINGLE)
        self.__add_columns(treeview,"Artist",self.on_field_edited)

        self.extra_model = self.__create_model()
        treeview = xml.get_widget("track_extras")
        treeview.set_model(self.extra_model)
        treeview.set_rules_hint(True)
        treeview.get_selection().set_mode(gtk.SELECTION_SINGLE)
        self.__add_columns(treeview,"Extra",self.on_field_edited)

        self.xmcd = None
        self.filename = None
        self.edited = False

    def __create_model(self):
        return gtk.ListStore(
            gobject.TYPE_INT,
            gobject.TYPE_STRING,
            gobject.TYPE_BOOLEAN)

    #album_name,artist_name,album_year,album_extra should be unicode strings
    #tracks,artists,extras should be [track_number,unicode] pairs
    def set_data(self,
                 album_name,artist_name,album_year,album_extra,
                 tracks,artists,extras):
        self.xml.get_widget("album_name").set_text(album_name)
        self.xml.get_widget("artist_name").set_text(artist_name)
        self.xml.get_widget("album_year").set_text(album_year)
        self.xml.get_widget("album_extra").set_text(album_extra)

        for (model,data) in zip([self.track_model,
                                 self.artist_model,
                                 self.extra_model],
                                [tracks,artists,extras]):
            model.clear()
            for item in data:
                iter = model.append()

                model.set(iter,
                          COLUMN_NUMBER, item[COLUMN_NUMBER],
                          COLUMN_NAME, item[COLUMN_NAME],
                          COLUMN_EDITABLE, True)

    def __add_columns(self, treeview, name_header, edited_method):
        model = treeview.get_model()

        # number column
        renderer = gtk.CellRendererText()
        renderer.set_property('xalign',1.0)
        renderer.set_property('alignment',pango.ALIGN_RIGHT)
        renderer.set_property('family','Monospace')
        renderer.set_property('weight',800)
        renderer.set_data("column", COLUMN_NUMBER)
        column = gtk.TreeViewColumn("#", renderer, text=COLUMN_NUMBER)
        treeview.append_column(column)

        # name column
        renderer = gtk.CellRendererText()
        renderer.connect("edited", edited_method, model)
        renderer.set_data("column", COLUMN_NAME)
        column = gtk.TreeViewColumn(name_header, renderer, text=COLUMN_NAME,
                                    editable=COLUMN_EDITABLE)
        treeview.append_column(column)


    def on_field_edited(self, cell, path_string, new_text, model):

        iter = model.get_iter_from_string(path_string)
        path = model.get_path(iter)[0]
        column = cell.get_data("column")

        if column == COLUMN_NAME:
            old_text = model.get(iter,column)[0]
            model.set(iter, column, new_text)

        if (old_text != new_text):
            self.edited = True
            self.set_title()

    def cut(self,caller):
        widget = self.xml.get_widget("window").get_focus()
        if (hasattr(widget,"cut_clipboard")):
            widget.cut_clipboard()

    def copy(self,caller):
        widget = self.xml.get_widget("window").get_focus()
        if (hasattr(widget,"copy_clipboard")):
            widget.copy_clipboard()

    def paste(self,caller):
        widget = self.xml.get_widget("window").get_focus()
        if (hasattr(widget,"paste_clipboard")):
            widget.paste_clipboard()

    def clear(self,caller):
        widget = self.xml.get_widget("window").get_focus()
        if (hasattr(widget,"delete_selection")):
            widget.delete_selection()

    def xmcd_update(self):
        if (self.xmcd is None):
            return

        self.xmcd['DTITLE'] = u"%s / %s" % \
            (self.xml.get_widget("artist_name").get_text().decode('utf-8'),
             self.xml.get_widget("album_name").get_text().decode('utf-8'))
        self.xmcd['DYEAR'] = self.xml.get_widget("album_year").get_text().decode('utf-8')
        self.xmcd['EXTDD'] = self.xml.get_widget("album_extra").get_text().decode('utf-8')

        for i in xrange(len(self.track_model)):
            track_name = self.track_model[i][1].decode('utf-8')
            artist_name = self.artist_model[i][1].decode('utf-8')
            if (len(artist_name) > 0):
                self.xmcd['TTITLE%s' % (i)] = u"%s / %s" % (artist_name,
                                                            track_name)
            else:
                self.xmcd['TTITLE%s' % (i)] = track_name

        for i in xrange(len(self.extra_model)):
            self.xmcd['EXTT%s' % (i)] = self.extra_model[i][1].decode('utf-8')

    def new(self,caller):
        self.xml.get_widget("selecttracks").run()

    def from_tracks(self,dialog,signal):
        dialog.hide()
        if (signal == -5):
            self.read_xmcd(audiotools.XMCD.from_files(
                    audiotools.open_files(dialog.get_filenames())))
            self.edited = False
            self.filename = None
            self.set_title()

    def save(self,caller):
        if (self.xmcd is None):
            return
        elif (self.filename is None):
            return self.saveas(caller)

        self.xmcd_update()
        f = open(self.filename,'wb')
        f.write(self.xmcd.build())
        f.close()
        self.edited = False
        self.set_title()

    def saveas(self,caller):
        self.xml.get_widget("filesaver").run()

    def file_savedas(self,dialog,signal):
        dialog.hide()
        if (signal == -5):
            self.filename = dialog.get_filename()
            f = open(self.filename,'wb')
            f.write(self.xmcd.build())
            f.close()
            self.edited = False
            self.set_title()

    def open(self,caller):
        self.xml.get_widget("filechooser").run()

    def opened(self,dialog,signal):
        dialog.hide()
        if (signal == -5):
            self.read_file(dialog.get_filename())

    def read_file(self,filename):
        self.filename = filename
        try:
            self.read_xmcd(audiotools.XMCD.read(filename))
        except audiotools.XMCDException:
            #FIXME - throw an error dialog
            print >>sys.stderr,"*** Error opening %s" % (filename)
        except IOError:
            print >>sys.stderr,"*** Error opening %s" % (filename)

    def read_xmcd(self,xmcd):
        self.xmcd = xmcd

        ttitle = self.xmcd.get('DTITLE',u'')
        if (u' / ' in ttitle):
            (album_artist,album_name) = ttitle.split(u' / ',1)
        else:
            album_name = ttitle
            album_artist = u''
        year = self.xmcd.get('DYEAR',u'')
        extra = self.xmcd.get('EXTD',u'')

        tracks = []
        artists = []
        extras = []

        for key in self.xmcd.keys():
            if (key.startswith('TTITLE')):
                ttitle = self.xmcd[key]
                tracknum = audiotools.XMCD.key_digits(key)
                if (tracknum == -1):
                    continue
                else:
                    tracknum += 1
                if (u' / ' in ttitle):
                    (artist_name,track_name) = ttitle.split(u' / ',1)
                    tracks.append([tracknum,track_name])
                    artists.append([tracknum,artist_name])
                else:
                    tracks.append([tracknum,ttitle])
                    artists.append([tracknum,u''])
            elif (key.startswith('EXTT')):
                extt = self.xmcd[key]
                tracknum = audiotools.XMCD.key_digits(key)
                if (tracknum == -1):
                    continue
                else:
                    tracknum += 1
                extras.append([tracknum,extt])

        tracks.sort()
        artists.sort()
        extras.sort()

        self.set_data(album_name,album_artist,year,extra,
                      tracks,artists,extras)

        self.edited = False
        self.set_title()

    def set_title(self):
        if (self.edited):
            edited = "*"
        else:
            edited = ""

        if (self.filename is None):
            self.xml.get_widget("window").set_title(
                "%s<unnamed> - editxmcd" % (edited))
        else:
            (directory,filename) = os.path.split(self.filename)
            if (len(directory) > 0):
                self.xml.get_widget("window").set_title(
                    "%s%s (%s) - editxmcd" % (edited,filename,directory))
            else:
                self.xml.get_widget("window").set_title(
                    "%s%s - editxmcd" % (edited,filename))

    def field_changed(self,widget):
        self.edited = True
        self.set_title()

if (__name__ == '__main__'):
    gladepath = os.path.join(".","editxmcd.glade")
    if (os.path.isfile(gladepath)):
        xml = gtk.glade.XML(gladepath)
    else:
        gladepath = os.path.join(sys.prefix,"share/audiotools",
                                 "editxmcd.glade")
        if (os.path.isfile(gladepath)):
            xml = gtk.glade.XML(gladepath)
        else:
            print >>sys.stderr,"*** editxmcd.glade not found"
            sys.exit(1)
    #xml = gtk.glade.XML("editxmcd.glade")
    editxmcd = EditXMCD(xml)

    xml.signal_connect("gtk_main_quit",gtk.main_quit)
    xml.signal_connect("on_cut1_activate",editxmcd.cut)
    xml.signal_connect("on_copy1_activate",editxmcd.copy)
    xml.signal_connect("on_paste1_activate",editxmcd.paste)
    xml.signal_connect("on_delete1_activate",editxmcd.clear)

    xml.signal_connect("on_new1_activate",editxmcd.new)
    xml.signal_connect("tracks_selected",editxmcd.from_tracks)
    xml.signal_connect("on_save_as1_activate",editxmcd.saveas)

    xml.signal_connect("save_file",editxmcd.save)
    xml.signal_connect("open_file",editxmcd.open)
    xml.signal_connect("file_opened",editxmcd.opened)
    xml.signal_connect("file_saved_as",editxmcd.file_savedas)
    xml.signal_connect("field_changed",editxmcd.field_changed)

    #FIXME - add proper optparse support
    if (len(sys.argv) > 1):
        editxmcd.read_file(sys.argv[1])

    gtk.main()

