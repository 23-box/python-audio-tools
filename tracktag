#!/usr/bin/python

#Audio Tools, a module and set of tools for manipulating audio data
#Copyright (C) 2007-2012  Brian Langenberger

#This program is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2 of the License, or
#(at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA


import sys
import os.path
import audiotools
import audiotools.ui
import audiotools.text as _

if (audiotools.ui.AVAILABLE):
    urwid_present = True
    urwid = audiotools.ui.urwid

    class Tracktag(urwid.Pile):
        def __init__(self, tracks):
            self.status = urwid.Text(u"")

            #a dict of track_id -> (AudioFile, MetaData) values
            self.edited_tracks = {}
            track_data = []
            for track in tracks:
                filename = audiotools.Filename(track.filename)
                metadata = track.get_metadata()
                self.edited_tracks[filename] = (track, metadata)
                track_data.append((filename,
                                   unicode(filename.basename()),
                                   metadata))

            self.metadata = audiotools.ui.MetaDataEditor(track_data,
                                                         self.changed,
                                                         self.swiveled)

            self.save_button = urwid.Button(_.LAB_APPLY,
                                            on_press=self.save)
            cancel = urwid.Button(_.LAB_QUIT,
                                  on_press=self.exit)

            urwid.Pile.__init__(
                self,
                [("weight", 1, self.metadata),
                 ("fixed", 1, urwid.Filler(urwid.Divider(u"\u2500"))),
                 ("fixed", 1, urwid.Filler(urwid.GridFlow([self.save_button,
                                                           cancel],
                                                          10, 5, 1, 'center'))),
                 ("fixed", 1, urwid.Filler(self.status))])

            self.modified = False

        def unhandled_input(self, i):
            if (i == 'esc'):
                raise urwid.ExitMainLoop()
            elif (i == 'f1'):
                self.metadata.select_previous_item()
            elif (i == 'f2'):
                self.metadata.select_next_item()

        def save(self, button, arg=None):
            if (self.modified):
                self.status.set_text(_.LAB_TRACKTAG_UPDATING)
                self.draw_screen()

                total = 0
                for (track_id, updated_metadata) in self.metadata.metadata():
                    (track, original_metadata) = self.edited_tracks[track_id]
                    if (updated_metadata != original_metadata):
                        for attr in audiotools.MetaData.FIELDS:
                            original_value = getattr(original_metadata, attr)
                            updated_value = getattr(updated_metadata, attr)
                            if (original_value != updated_value):
                                #if updated_value is None,
                                #this will work like delattr
                                setattr(original_metadata,
                                        attr,
                                        updated_value)

                        #FIXME - check for errors here
                        track.update_metadata(original_metadata)
                        total += 1

                if (total != 1):
                    self.status.set_text(_.LAB_TRACKTAG_UPDATED % (total))
                else:
                    self.status.set_text(_.LAB_TRACKTAG_UPDATED_1)

                self.save_button.set_label(_.LAB_TRACKTAG_APPLY)
                self.modified = False

        def exit(self, button, arg=None):
            raise urwid.ExitMainLoop()

        def changed(self, widget, new_text):
            self.save_button.set_label(('modified', _.LAB_TRACKTAG_APPLY))
            self.status.set_text(u"")
            self.modified = True

        def swiveled(self, radio_button, selected, swivel):
            if (selected):
                keys = []
                if (radio_button.previous_radio_button() is not None):
                    keys.extend([('key', u"F1"),
                                 _.LAB_KEY_PREVIOUS % (swivel.swivel_type)])
                if (radio_button.next_radio_button() is not None):
                    if (len(keys) > 0):
                        keys.append(u"   ")
                    keys.extend([('key', u"F2"),
                                 _.LAB_KEY_NEXT % (swivel.swivel_type)])

                if (len(keys) > 0):
                    self.status.set_text(keys)
                else:
                    self.status.set_text(u"")

else:
    urwid_present = False


#tries to return a populated Image object of the appropriate type
#raises InvalidImage if something goes wrong during opening or parsing
def get_raw_image(filename, type):
    try:
        f = open(filename, 'rb')
        data = f.read()
        f.close()

        return audiotools.Image.new(data, u'', type)
    except IOError:
        raise audiotools.InvalidImage(_.ERR_OPEN_IOERROR %
                                      (audiotools.Filename(filename),))


#given a comment filename
#returns the comment as a unicode string
#or exits with an error if the file cannot be read
#or is not UTF-8 text
def read_comment(filename, messenger):
    try:
        f = open(filename, 'rb')
        data = f.read().decode('utf-8', 'replace')
        f.close()

        if (((data.count(u"\uFFFD") * 100) / len(data)) >= 10):
            messenger.error(
                _.ERR_TRACKTAG_COMMENT_NOT_UTF8 %
                (audiotools.Filename(filename),))
            sys.exit(1)
        else:
            return data
    except IOError:
        messenger.error(_.ERR_TRACKTAG_COMMENT_IOERROR %
                        (audiotools.Filename(filename),))
        sys.exit(1)


UPDATE_OPTIONS = {"track_name":("--name",
                                _.LAB_TRACKTAG_UPDATE_TRACK_NAME),
                  "artist_name":("--artist",
                                 _.LAB_TRACKTAG_UPDATE_ARTIST_NAME),
                  "performer_name":("--performer",
                                    _.LAB_TRACKTAG_UPDATE_PERFORMER_NAME),
                  "composer_name":("--composer",
                                   _.LAB_TRACKTAG_UPDATE_COMPOSER_NAME),
                  "conductor_name":("--conductor",
                                    _.LAB_TRACKTAG_UPDATE_CONDUCTOR_NAME),
                  "album_name":("--album",
                                _.LAB_TRACKTAG_UPDATE_ALBUM_NAME),
                  "catalog":("--catalog",
                             _.LAB_TRACKTAG_UPDATE_CATALOG),
                  "track_number":("--number",
                                  _.LAB_TRACKTAG_UPDATE_TRACK_NUMBER),
                  "track_total":("--track-total",
                                 _.LAB_TRACKTAG_UPDATE_TRACK_TOTAL),
                  "album_number":("--album-number",
                                  _.LAB_TRACKTAG_UPDATE_ALBUM_NUMBER),
                  "album_total":("--album-total",
                                 _.LAB_TRACKTAG_UPDATE_ALBUM_TOTAL),
                  "ISRC":("--ISRC",
                          _.LAB_TRACKTAG_UPDATE_ISRC),
                  "publisher":("--publisher",
                               _.LAB_TRACKTAG_UPDATE_PUBLISHER),
                  "media":("--media-type",
                           _.LAB_TRACKTAG_UPDATE_MEDIA),
                  "year":("--year",
                          _.LAB_TRACKTAG_UPDATE_YEAR),
                  "date":("--date",
                          _.LAB_TRACKTAG_UPDATE_DATE),
                  "copyright":("--copyright",
                               _.LAB_TRACKTAG_UPDATE_COPYRIGHT),
                  "comment":("--comment",
                             _.LAB_TRACKTAG_UPDATE_COMMENT)}

REMOVE_OPTIONS = {"track_name":("--remove-name",
                                _.LAB_TRACKTAG_REMOVE_TRACK_NAME),
                  "artist_name":("--remove-artist",
                                 _.LAB_TRACKTAG_REMOVE_ARTIST_NAME),
                  "performer_name":("--remove-performer",
                                    _.LAB_TRACKTAG_REMOVE_PERFORMER_NAME),
                  "composer_name":("--remove-composer",
                                   _.LAB_TRACKTAG_REMOVE_COMPOSER_NAME),
                  "conductor_name":("--remove-conductor",
                                 _.LAB_TRACKTAG_REMOVE_CONDUCTOR_NAME),
                  "album_name":("--remove-album",
                                _.LAB_TRACKTAG_REMOVE_ALBUM_NAME),
                  "catalog":("--remove-catalog",
                             _.LAB_TRACKTAG_REMOVE_CATALOG),
                  "track_number":("--remove-number",
                                  _.LAB_TRACKTAG_REMOVE_TRACK_NUMBER),
                  "track_total":("--remove-track-total",
                                 _.LAB_TRACKTAG_REMOVE_TRACK_TOTAL),
                  "album_number":("--remove-album-number",
                                  _.LAB_TRACKTAG_REMOVE_ALBUM_NUMBER),
                  "album_total":("--remove-album-total",
                                 _.LAB_TRACKTAG_REMOVE_ALBUM_TOTAL),
                  "ISRC":("--remove-ISRC",
                          _.LAB_TRACKTAG_REMOVE_ISRC),
                  "publisher":("--remove-publisher",
                               _.LAB_TRACKTAG_REMOVE_PUBLISHER),
                  "media":("--remove-media-type",
                           _.LAB_TRACKTAG_REMOVE_MEDIA),
                  "year":("--remove-year",
                          _.LAB_TRACKTAG_REMOVE_YEAR),
                  "date":("--remove-date",
                          _.LAB_TRACKTAG_REMOVE_DATE),
                  "copyright":("--remove-copyright",
                               _.LAB_TRACKTAG_REMOVE_COPYRIGHT),
                  "comment":("--remove-comment",
                             _.LAB_TRACKTAG_REMOVE_COMMENT)}

if (__name__ == '__main__'):
    #add an enormous number of options to the parser
    #neatly categorized for convenience
    parser = audiotools.OptionParser(
        usage=_.USAGE_TRACKTAG,
        version="Python Audio Tools %s" % (audiotools.VERSION))

    parser.add_option(
        '-I', '--interactive',
        action='store_true',
        default=False,
        dest='interactive',
        help=_.OPT_INTERACTIVE_METADATA)

    text_group = audiotools.OptionGroup(parser, _.OPT_CAT_TEXT)

    for field in audiotools.MetaData.FIELD_ORDER:
        if (field in UPDATE_OPTIONS):
            variable = "update_%s" % (field)
            (option, help_text) = UPDATE_OPTIONS[field]
            text_group.add_option(
                option,
                action='store',
                type='string' if field not in
                audiotools.MetaData.INTEGER_FIELDS else 'int',
                dest=variable,
                metavar='STRING' if field not in
                audiotools.MetaData.INTEGER_FIELDS else 'INT',
                help=help_text)

    text_group.add_option(
        '--comment-file',
        action='store',
        type='string',
        dest='comment_file',
        metavar='FILENAME',
        help=_.OPT_TRACKTAG_COMMENT_FILE)

    parser.add_option_group(text_group)

    parser.add_option(
        '-r', '--replace',
        action='store_true',
        default=False,
        dest='replace',
        help=_.OPT_TRACKTAG_REPLACE)

    parser.add_option(
        '--cue',
        action='store',
        type='string',
        dest='cue',
        metavar='FILENAME',
        help=_.OPT_TRACKTAG_CUESHEET)

    img_group = audiotools.OptionGroup(parser, _.OPT_CAT_IMAGE)

    img_group.add_option(
        '--remove-images',
        action='store_true',
        default=False,
        dest='remove_images',
        help=_.OPT_TRACKTAG_REMOVE_IMAGES)

    for (option, destination, helptext) in [
        ('--front-cover', 'front_cover', _.OPT_TRACKTAG_FRONT_COVER),
        ('--back-cover', 'back_cover', _.OPT_TRACKTAG_BACK_COVER),
        ('--leaflet', 'leaflet', _.OPT_TRACKTAG_LEAFLET),
        ('--media', 'media', _.OPT_TRACKTAG_MEDIA),
        ('--other-image', 'other_image', _.OPT_TRACKTAG_OTHER_IMAGE)]:
        img_group.add_option(
            option,
            action='append',
            type='string',
            dest=destination,
            metavar='FILENAME',
            help=helptext)

    parser.add_option_group(img_group)

    remove_group = audiotools.OptionGroup(parser, _.OPT_CAT_REMOVAL)

    for field in audiotools.MetaData.FIELD_ORDER:
        if (field in REMOVE_OPTIONS):
            variable = "remove_%s" % (field)
            (option, help_text) = REMOVE_OPTIONS[field]
            remove_group.add_option(
                option,
                action='store_true',
                default=False,
                dest=variable,
                help=help_text)

    parser.add_option_group(remove_group)

    parser.add_option(
        '--replay-gain',
        action='store_true',
        default=False,
        dest='add_replay_gain',
        help=_.OPT_REPLAY_GAIN_TRACKTAG)

    parser.add_option(
        '-j', '--joint',
        action='store',
        type='int',
        default=audiotools.MAX_JOBS,
        dest='max_processes',
        help=_.OPT_JOINT)

    parser.add_option(
        '-V', '--verbose',
        action='store',
        dest='verbosity',
        choices=audiotools.VERBOSITY_LEVELS,
        default=audiotools.DEFAULT_VERBOSITY,
        help=_.OPT_VERBOSE)

    (options, args) = parser.parse_args()
    msg = audiotools.Messenger("tracktag", options)

    #open our set of input files for tagging
    try:
        audiofiles = audiotools.open_files(args,
                                           messenger=msg,
                                           no_duplicates=True)
    except audiotools.DuplicateFile, err:
        msg.error(_.ERR_DUPLICATE_FILE % (err.filename,))
        sys.exit(1)

    #and the --cue file
    isrcs = {}
    import_cuesheet = None
    if (options.cue is not None):
        try:
            cuesheet = audiotools.read_sheet(options.cue)

            #if there's a single audio file
            #and the cuesheet is sized to fit that file
            #attempt to embed the cuesheet in the file
            if ((len(audiofiles) == 1) and
                (list(cuesheet.pcm_lengths(
                            audiofiles[0].total_frames(),
                            audiofiles[0].sample_rate()))[-1] > 0)):
                import_cuesheet = cuesheet
            else:
                #otherwise, treat the cuesheet as a source of ISRC data
                isrcs = dict([(k, v.decode('ascii', 'replace'))
                              for (k, v) in
                              cuesheet.ISRCs().items()])
        except audiotools.SheetException, err:
            msg.error(unicode(err))
            sys.exit(1)

    get_image = get_raw_image

    for file in audiofiles:
        track_modified = False

        #determine which MetaData to use as our base
        #depending on whether we're performing a full replacement
        if (not options.replace):
            metadata = file.get_metadata()
            if (metadata is not None):
                update_method = "update_metadata"
            else:
                metadata = audiotools.MetaData()
                update_method = "set_metadata"
        else:
            metadata = audiotools.MetaData()
            update_method = "set_metadata"

        #apply tagging options to that metadata in reverse order of precedence

        #perform the image tagging
        try:
            if (metadata.supports_images()):
                if (options.remove_images):
                    for i in metadata.images():
                        metadata.delete_image(i)
                        track_modified = True

                if (options.front_cover is not None):
                    for path in options.front_cover:
                        metadata.add_image(get_image(path, 0))
                        track_modified = True

                if (options.leaflet is not None):
                    for path in options.leaflet:
                        metadata.add_image(get_image(path, 2))
                        track_modified = True

                if (options.back_cover is not None):
                    for path in options.back_cover:
                        metadata.add_image(get_image(path, 1))
                        track_modified = True

                if (options.media is not None):
                    for path in options.media:
                        metadata.add_image(get_image(path, 3))
                        track_modified = True

                if (options.other_image is not None):
                    for path in options.other_image:
                        metadata.add_image(get_image(path, 4))
                        track_modified = True
        except audiotools.InvalidImage, err:
            msg.error(_.ERR_INVALID_IMAGE %
                      {"filename": audiotools.Filename(file.filename),
                       "message": unicode(err)})
            sys.exit(1)

        #apply text field removal
        for (attr, (option, help_text)) in REMOVE_OPTIONS.items():
            variable = "remove_%s" % (attr)
            if (getattr(options, variable)):
                delattr(metadata, attr)
                track_modified = True

        if (options.update_track_number is not None):
            track_number = options.update_track_number
        else:
            track_number = file.track_number()

        #handle cuesheet ISRC data
        if (track_number in isrcs):
            metadata.ISRC = isrcs[track_number]
            track_modified = True

        #update fields from the command line
        for (attr, (option, help_text)) in UPDATE_OPTIONS.items():
            variable = "update_%s" % (attr)
            new_value = getattr(options, variable)
            if (new_value is not None):
                if (isinstance(new_value, str)):
                    new_value = new_value.decode(audiotools.IO_ENCODING,
                                                 'replace')
                setattr(metadata, attr, new_value)
                track_modified = True

        #add comment-file
        if (options.comment_file is not None):
            metadata.comment = read_comment(options.comment_file, msg)
            track_modified = True

        #check if there's been any modifications made
        if (track_modified or
            (import_cuesheet is not None) or
            options.replace):
            try:
                #either set or update metadata
                #depending on whether we're performing a full replacement
                getattr(file, update_method)(metadata)

                #insert embedded cuesheet file
                if (import_cuesheet is not None):
                    file.set_cuesheet(import_cuesheet)
            except IOError:
                msg.error(_.ERR_ENCODING_ERROR %
                          (audiotools.Filename(file.filename),))
                sys.exit(1)

    #add/apply replay_gain to tracks if indicated
    if (options.add_replay_gain and (len(audiofiles) > 0)):
        queue = audiotools.ExecProgressQueue(
            audiotools.ProgressDisplay(msg))

        for album in audiotools.group_tracks(audiofiles):
            #add ReplayGain to groups of files
            #belonging to the same album

            album_number = set([t.album_number() for t in album]).pop()

            audio_type = album[0].__class__

            if (audio_type.can_add_replay_gain(album)):
                #FIXME - should pull ReplayGain text
                #from elsewhere
                queue.execute(
                    audio_type.add_replay_gain,
                    (u"%s ReplayGain%s" %
                     ((u"Adding" if audio_type.lossless_replay_gain() else
                       u"Applying"),
                      (u"" if album_number is None else
                       (u" to album %d" % (album_number))))),
                    (u"ReplayGain %s%s" %
                     ((u"added" if audio_type.lossless_replay_gain() else
                       u"applied"),
                      (u"" if album_number is None else
                       (u" to album %d" % (album_number))))),
                    [a.filename for a in album])

        try:
            queue.run(options.max_processes)
        except ValueError, err:
            msg.error(unicode(err))
            sys.exit(1)

    #finally, after all the command-line arguments are processed
    #run interactive mode if indicated
    if (options.interactive):
        if (not urwid_present):
            audiotools.ui.not_available_message(msg)
            sys.exit(1)

        tracktag = Tracktag(audiofiles)
        loop = urwid.MainLoop(tracktag,
                              [('label', 'default,bold', 'default'),
                               ('key', 'white', 'dark blue'),
                               ('modified', 'default,bold', 'default', '')],
                              unhandled_input=tracktag.unhandled_input)
        tracktag.draw_screen = loop.draw_screen
        loop.run()
