#!/usr/bin/python

#Audio Tools, a module and set of tools for manipulating audio data
#Copyright (C) 2007-2009  Brian Langenberger

#This program is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2 of the License, or
#(at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA


import sys
import os
import os.path
import audiotools
import gettext

gettext.install("audiotools",unicode=True)

if (__name__ == '__main__'):
    parser = audiotools.OptionParser(
        usage=_(u'%prog [options] [-x XML file] <track 1> [track 2] ...'),
        version="Python Audio Tools %s" % (audiotools.VERSION))
    parser.add_option('-x','--xml',action='store',
                      type='string',dest='xml',default='-')
    parser.add_option('-s','--musicbrainz-server',action='store',
                      type='string',dest='musicbrainz_server',
                      default=audiotools.MUSICBRAINZ_SERVER)
    parser.add_option('-p','--musicbrainz-port',action='store',
                      type='int',dest='musicbrainz_port',
                      default=audiotools.MUSICBRAINZ_PORT)

    parser.add_option('-V','--verbose',
                      action='store',
                      dest='verbosity',
                      choices=["quiet","normal","debug"],
                      default="normal",
                      help=_(u'the verbosity level to execute at'))

    (options,args) = parser.parse_args()
    msg = audiotools.Messenger("track2mb",options)

    audiofiles = audiotools.open_files(args)

    if (len(audiofiles) < 1):
        msg.error(_(u"You must specify at least 1 supported audio file"))
        sys.exit(1)

    if (options.xml == '-'):
        outfile = sys.stdout
    else:
        try:
            if (not os.path.isfile(options.xml)):
                outfile = file(options.xml,"w")
            else:
                msg.error(_(u"Refusing to overwrite \"%s\"") % \
                              (msg.filename(options.xml)))
                sys.exit(1)
        except IOError,e:
            msg.error(_(u"Unable to write \"%s\"") % \
                          (msg.filename(options.xml)))
            sys.exit(1)

    mb = audiotools.MusicBrainz(options.musicbrainz_server,
                                options.musicbrainz_port,msg)

    #if single file with cuesheet, use that for offsets
    if ((len(audiofiles) == 1) and
        (audiofiles[0].get_cuesheet() is not None)):
        file = audiofiles[0]
        discid = audiotools.MBDiscID([(length * 75) / file.sample_rate()
                                      for length in
                                      file.get_cuesheet().pcm_lengths(
                    file.total_frames())])
    else:
        discid = audiotools.MBDiscID([file.cd_frames() for file in audiofiles])

    mb.connect()
    mb.read_data(discid,outfile)
    mb.close()
    outfile.close()
