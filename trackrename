#!/usr/bin/python

#Audio Tools, a module and set of tools for manipulating audio data
#Copyright (C) 2007-2009  Brian Langenberger

#This program is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2 of the License, or
#(at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA


import sys
import audiotools
import os.path
import optparse
import subprocess
import gettext

gettext.install("audiotools",unicode=True)

if (__name__ == '__main__'):
    parser = optparse.OptionParser(
        "%prog [-x XMCD file] <track 1> [track 2] ...",
        version="Python Audio Tools %s" % (audiotools.VERSION))

    parser.add_option('-x','--xmcd',
                      action='store',
                      type='string',
                      dest='xmcd',
                      help='an XMCD file')

    parser.add_option('--format',
                      action='store',
                      type='string',
                      default=audiotools.FILENAME_FORMAT,
                      dest='format',
                      help='the format string for new filenames')

    parser.add_option('-V','--verbose',
                      action='store',
                      dest='verbosity',
                      choices=["quiet","normal","debug"],
                      default="normal",
                      help='the verbosity level to execute at')

    (options,args) = parser.parse_args()
    msg = audiotools.Messenger("trackrename",options)

    audiofiles = audiotools.open_files(args)

    if (len(audiofiles) < 1):
        msg.error(_(u"You must specify at least one audio file"))
        sys.exit(1)

    if (options.verbosity != 'quiet'):
        mv_flags = '-iv'
    else:
        mv_flags = '-i'

    if (options.xmcd != None):
        #try to set the metadata and track name from the XMCD metadata
        try:
            metadata = audiotools.XMCD.read(options.xmcd).metadata()
        except audiotools.XMCDException:
            msg.error(_(u"Error opening XMCD file \"%s\"") % \
                          (msg.filename(options.xmcd)))
            sys.exit(1)

        try:
            for (track,new_name) in [(track,
                                       track.track_name(track.track_number(),
                                                        track.get_metadata(),
                                                        track.album_number(),
                                                        options.format))
                                     for track in audiofiles]:
                (path,filename) = os.path.split(track.filename)
                if (filename != new_name):
                    audiotools.make_dirs(os.path.join(path,new_name))

                    subprocess.call([audiotools.BIN['mv'],
                                     mv_flags,
                                     track.filename,
                                     os.path.join(path,new_name)])
        except audiotools.UnsupportedTracknameField,err:
            err.error_msg(msg)
            sys.exit(1)
    else:
        #try to set the track name from the track's metadata
        try:
            for (track,new_name) in [(track,
                                      track.track_name(track.track_number(),
                                                       track.get_metadata(),
                                                       track.album_number(),
                                                       options.format))
                                     for track in audiofiles]:
                (path,filename) = os.path.split(track.filename)

                if (filename != new_name):
                    audiotools.make_dirs(os.path.join(path,new_name))

                    subprocess.call([audiotools.BIN['mv'],
                                     mv_flags,
                                     track.filename,
                                     os.path.join(path,new_name)])
        except audiotools.UnsupportedTracknameField,err:
            err.error_msg(msg)
            sys.exit(1)
