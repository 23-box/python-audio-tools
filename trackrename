#!/usr/bin/python

#Audio Tools, a module and set of tools for manipulating audio data
#Copyright (C) 2007-2012  Brian Langenberger

#This program is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2 of the License, or
#(at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA


import sys
import audiotools
import os.path
import shutil

from audiotools.text import (USAGE_TRACKRENAME,
                             OPT_FORMAT,
                             OPT_VERBOSE,
                             ERR_FILES_REQUIRED,
                             ERR_DUPLICATE_FILE,
                             ERR_DUPLICATE_OUTPUT_FILE,
                             LAB_ENCODE,
                             ERR_RENAME)


if (__name__ == '__main__'):
    parser = audiotools.OptionParser(
        USAGE_TRACKRENAME,
        version="Python Audio Tools %s" % (audiotools.VERSION))

    parser.add_option('--format',
                      action='store',
                      type='string',
                      default=None,
                      dest='format',
                      help=OPT_FORMAT)

    parser.add_option('-V', '--verbose',
                      action='store',
                      dest='verbosity',
                      choices=audiotools.VERBOSITY_LEVELS,
                      default=audiotools.DEFAULT_VERBOSITY,
                      help=OPT_VERBOSE)

    (options, args) = parser.parse_args()
    msg = audiotools.Messenger("trackrename", options)

    try:
        audiofiles = audiotools.open_files(args,
                                           messenger=msg,
                                           no_duplicates=True)
    except audiotools.DuplicateFile, err:
        msg.error(ERR_DUPLICATE_FILE % (err.filename,))
        sys.exit(1)

    if (len(audiofiles) < 1):
        msg.error(ERR_FILES_REQUIRED)
        sys.exit(1)

    #get a set of files to be renamed
    #and generate an error if a duplicate occurs
    renamed_filenames = set([audiotools.Filename(t.filename) for t in
                             audiofiles])
    to_rename = []  #a (old_name, new_name) tuple
    try:
        for track in audiofiles:
            original_filename = audiotools.Filename(track.filename)
            new_filename = audiotools.Filename(
                os.path.join(
                    os.path.dirname(track.filename),
                    track.track_name(file_path=track.filename,
                                     track_metadata=track.get_metadata(),
                                     format=options.format)))
            if (new_filename != original_filename):
                if (new_filename not in renamed_filenames):
                    renamed_filenames.add(new_filename)
                    to_rename.append((original_filename, new_filename))
                else:
                    msg.error(ERR_DUPLICATE_OUTPUT_FILE %
                              (new_filename,))
                    sys.exit(1)
    except audiotools.UnsupportedTracknameField, err:
        err.error_msg(msg)
        sys.exit(1)

    #create subdirectories for renamed files
    for (original_filename, new_filename) in to_rename:
        try:
            audiotools.make_dirs(str(new_filename))
        except OSError, err:
            msg.os_error(err)
            sys.exit(1)

    #perform the actual renaming itself
    for (i, (original_filename, new_filename)) in enumerate(to_rename):
        try:
            shutil.move(str(original_filename), str(new_filename))
            msg.info(
                audiotools.output_progress(
                    LAB_ENCODE % {"source":original_filename,
                                  "destination":new_filename},
                    i + 1, len(to_rename)))
        except IOError, err:
            msg.error(ERR_RENAME %
                      {"source":original_filename,
                       "target":new_filename})
            sys.exit(1)
