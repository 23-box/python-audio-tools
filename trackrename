#!/usr/bin/python

#Audio Tools, a module and set of tools for manipulating audio data
#Copyright (C) 2007-2012  Brian Langenberger

#This program is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2 of the License, or
#(at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA


import sys
import audiotools
import os.path
import shutil
import gettext

gettext.install("audiotools", unicode=True)

if (__name__ == '__main__'):
    parser = audiotools.OptionParser(
        _(u"%prog [options] <track 1> [track 2] ..."),
        version="Python Audio Tools %s" % (audiotools.VERSION))

    parser.add_option('--format',
                      action='store',
                      type='string',
                      default=None,
                      dest='format',
                      help=_(u'the format string for new filenames'))

    parser.add_option('-V', '--verbose',
                      action='store',
                      dest='verbosity',
                      choices=audiotools.VERBOSITY_LEVELS,
                      default=audiotools.DEFAULT_VERBOSITY,
                      help=_(u'the verbosity level to execute at'))

    (options, args) = parser.parse_args()
    msg = audiotools.Messenger("trackrename", options)

    try:
        audiofiles = audiotools.open_files(args,
                                           messenger=msg,
                                           no_duplicates=True)
    except audiotools.DuplicateFile, err:
        msg.error(u"File \"%s\" included more than once" %
                  (msg.filename(err.filename)))
        sys.exit(1)

    if (len(audiofiles) < 1):
        msg.error(_(u"You must specify at least 1 supported audio file"))
        sys.exit(1)

    #get a set of files to be renamed
    #and generate an error if a duplicate occurs
    to_rename = []  #a (old_name, new_name) tuple
    try:
        renamed_paths = set([])
        for track in audiofiles:
            original_path = track.filename
            new_path = os.path.join(
                os.path.dirname(track.filename),
                track.track_name(file_path=track.filename,
                                 track_metadata=track.get_metadata(),
                                 format=options.format))
            if (new_path not in renamed_paths):
                renamed_paths.add(new_path)
                if (new_path != original_path):
                    to_rename.append((original_path, new_path))
            else:
                msg.error(u"Output file \"%s\" occurs more than once" %
                          (msg.filename(new_path)))
                sys.exit(1)
    except audiotools.UnsupportedTracknameField, err:
        err.error_msg(msg)
        sys.exit(1)

    #create subdirectories for renamed files
    for (original_path, new_path) in to_rename:
        try:
            audiotools.make_dirs(new_path)
        except OSError, err:
            msg.os_error(err)
            sys.exit(1)

    #perform the actual renaming itself
    for (original_path, new_path) in to_rename:
        try:
            shutil.move(original_path, new_path)
            msg.info(
                u"%s -> %s" %
                (msg.filename(original_path), msg.filename(new_path)))
        except IOError, err:
            msg.error(
                u"unable to rename \"%s\" to \"%s\"" %
                (original_path, new_path))
            sys.exit(1)
