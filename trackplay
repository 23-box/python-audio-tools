#!/usr/bin/python

#Audio Tools, a module and set of tools for manipulating audio data
#Copyright (C) 2007  Brian Langenberger

#This program is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2 of the License, or
#(at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA


import audiotools
import optparse
import sys
import struct
import ossaudiodev
import audiotools.pcmstream
import audiotools.pulse

class OSSPlayer:
    def __init__(self):
        self.dev = ossaudiodev.open("w")

    def close(self):
        self.dev.close()

    def play(self, pcm):
        if (pcm.bits_per_sample == 16):
            fmt = ossaudiodev.AFMT_S16_LE
        elif (pcm.bits_per_sample == 8):
            fmt = ossaudiodev.AFMT_U8
        else:
            #if the bits-per-sample is not 8/16 (which usually means 24)
            #have PCMConverter turn it into 16 for us
            pcm = audiotools.PCMConverter(
                pcm,pcm.sample_rate,pcm.channels,
                16)
            fmt = ossaudiodev.AFMT_S16_LE

        self.dev.setparameters(fmt,
                          pcm.channels,
                          pcm.sample_rate)

        audiotools.threaded_transfer_data(pcm.read,self.dev.writeall)

class __FloatConverter__:
    def __init__(self, pcmstream, bits_per_sample):
        self.floatstream = audiotools.pcmstream.PCMStreamReader(
            pcmstream, bits_per_sample / 8, False, True)

    def read(self, bytes):
        data = self.floatstream.read(bytes)
        return struct.pack("<%df" % (len(data)),*data)
        

class PulsePlayer:
    def __init__(self):
        self.dev = None
        self.last_pcm = (None,None,None)

    def close(self):
        if (self.dev is not None):
            self.dev.close()

    def play(self, pcm):
        current_pcm = (pcm.sample_rate,
                       pcm.channels,
                       pcm.bits_per_sample)
        if (self.last_pcm != current_pcm):
            if (self.dev is not None):
                self.dev.close()

            if (pcm.bits_per_sample in (8,16)):
                self.dev = audiotools.pulse.Output(pcm.sample_rate,
                                                   pcm.channels,
                                                   pcm.bits_per_sample)
            else:
                self.dev = audiotools.pulse.Output(pcm.sample_rate,
                                                   pcm.channels,
                                                   32)

        if (pcm.bits_per_sample in (8,16)):
            #8 and 16 bit ints can be passed through directly
            audiotools.threaded_transfer_data(pcm.read,self.dev.write)
        else:
            #24 bit ints must be converted to floats
            converter = __FloatConverter__(pcm,pcm.bits_per_sample)
            audiotools.threaded_transfer_data(converter.read,self.dev.write)

            

if (__name__ == '__main__'):
    parser = optparse.OptionParser(
        "%prog <track 1> [track 2] ...",
        version="Python Audio Tools %s" % (audiotools.VERSION))

    parser.add_option('-T','--track-replaygain',
                      action='store_true',
                      default=False,
                      dest='track_replaygain',
                      help='apply track ReplayGain during playback, if present')

    parser.add_option('-A','--album-replaygain',
                      action='store_true',
                      default=False,
                      dest='album_replaygain',
                      help='apply album ReplayGain during playback, if present')

    (options,args) = parser.parse_args()

    #player = OSSPlayer()
    player = PulsePlayer()

    try:
        for audiofile in audiotools.open_files(args,sorted=False):
            pcm = audiofile.to_pcm()

            try:
                #if ReplayGain specified, wrap ReplayGainReader
                #around the given PCMReader
                if (options.track_replaygain or options.album_replaygain):
                    replaygain = audiofile.replay_gain()
                    if ((replaygain is not None) and options.album_replaygain):
                        pcm = audiotools.ReplayGainReader(
                            pcm,replaygain.album_gain,replaygain.album_peak)
                    elif ((replaygain is not None) and options.track_replaygain):
                        pcm = audiotools.ReplayGainReader(
                            pcm,replaygain.track_gain,replaygain.track_peak)

                player.play(pcm)
            finally:
                pcm.close()
    finally:
        player.close()
