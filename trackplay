#!/usr/bin/python

#Audio Tools, a module and set of tools for manipulating audio data
#Copyright (C) 2007-2012  Brian Langenberger

#This program is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2 of the License, or
#(at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

import sys
import time
import select
import os
import tty
import termios
import audiotools
import audiotools.ui
import audiotools.player
import audiotools.text as _

if (audiotools.ui.AVAILABLE):
    urwid = audiotools.ui.urwid

    class TrackplayGUI(audiotools.ui.PlayerGUI):
        def __init__(self, track_list, audio_output,
                     replay_gain=audiotools.player.RG_NO_REPLAYGAIN):
            def track_name(track):
                metadata = track.get_metadata()
                if ((metadata is not None) and
                    (metadata.track_name is not None)):
                    return metadata.track_name
                else:
                    return unicode(audiotools.Filename(track.filename))

            audiotools.ui.PlayerGUI.__init__(
                self,
                audiotools.player.Player(
                    audio_output=audio_output,
                    replay_gain=replay_gain,
                    next_track_callback=self.next_track),
                [(track_name(track),
                  (track, track.get_metadata())) for track in track_list],
                sum([track.seconds_length() for track in track_list]))

        def select_track(self, radio_button, new_state, user_data,
                         auto_play=True):
            if (new_state == True):
                (track, metadata) = user_data
                if (metadata is not None):
                    self.update_metadata(
                        track_name=metadata.track_name,
                        album_name=metadata.album_name,
                        artist_name=metadata.artist_name,
                        track_number=metadata.track_number,
                        track_total=metadata.track_total,
                        pcm_frames=track.total_frames(),
                        channels=track.channels(),
                        sample_rate=track.sample_rate(),
                        bits_per_sample=track.bits_per_sample())

                else:
                    self.update_metadata(
                        pcm_frames=track.total_frames(),
                        channels=track.channels(),
                        sample_rate=track.sample_rate(),
                        bits_per_sample=track.bits_per_sample())

                self.player.open(track)
                if (auto_play):
                    from audiotools.text import LAB_PAUSE_BUTTON

                    self.player.play()
                    self.play_pause_button.set_label(LAB_PAUSE_BUTTON)


    interactive_available = True
else:
    interactive_available = False


class TrackplayTTY:
    OUTPUT_FORMAT = (u"%(track_number)d/%(track_total)d " +
                     u"[%(sent_minutes)d:%(sent_seconds)2.2d / " +
                     u"%(total_minutes)d:%(total_seconds)2.2d] " +
                     u"%(channels)dch %(sample_rate)s " +
                     u"%(bits_per_sample)d-bit")

    def __init__(self, track_list, audio_output,
                 replay_gain=audiotools.player.RG_NO_REPLAYGAIN):
        self.track_list = track_list
        self.player = audiotools.player.Player(
            audio_output=audio_output,
            replay_gain=replay_gain,
            next_track_callback=self.next_track)
        self.track_index = -1
        self.current_track = None
        self.seconds_total = 0
        self.channels = 0
        self.sample_rate = 0
        self.bits_per_sample = 0
        self.track_number = 0
        self.track_total = len(track_list)

    def quit(self):
        if (self.current_track is not None):
            self.current_track = None
            self.player.close()

    def toggle_play_pause(self):
        if (self.current_track is not None):
            self.player.toggle_play_pause()

    def play(self):
        self.next_track()

    def stop(self):
        self.player.stop()

    def previous_track(self):
        if (self.track_index > 0):
            self.track_index -= 1
            self.current_track = self.track_list[self.track_index]
            self.channels = self.current_track.channels()
            self.sample_rate = self.current_track.sample_rate()
            self.bits_per_sample = self.current_track.bits_per_sample()
            self.track_number = self.track_index + 1
            self.player.open(self.current_track)
            self.player.play()

    def next_track(self):
        try:
            self.track_index += 1
            self.current_track = self.track_list[self.track_index]
            self.channels = self.current_track.channels()
            self.sample_rate = self.current_track.sample_rate()
            self.bits_per_sample = self.current_track.bits_per_sample()
            self.track_number = self.track_index + 1
            self.player.open(self.current_track)
            self.player.play()
        except IndexError:
            self.current_track = None
            self.player.close()

    def progress(self):
        return self.player.progress()

    def progress_line(self):
        return (self.OUTPUT_FORMAT %
                {"track_number": self.track_number,
                 "track_total": self.track_total,
                 "sent_minutes":
                     (frames_sent / self.sample_rate) / 60,
                 "sent_seconds":
                     (frames_sent / self.sample_rate) % 60,
                 "total_minutes":
                     (frames_total / self.sample_rate) / 60,
                 "total_seconds":
                     (frames_total / self.sample_rate) % 60,
                 "channels": self.channels,
                 "sample_rate": audiotools.khz(self.sample_rate),
                 "bits_per_sample": self.bits_per_sample})


if (__name__ == '__main__'):
    parser = audiotools.OptionParser(
        usage=_.USAGE_TRACKPLAY,
        version="Python Audio Tools %s" % (audiotools.VERSION))

    parser.add_option(
        '-I', '--interactive',
        action='store_true',
        default=False,
        dest='interactive',
        help=_.OPT_INTERACTIVE_PLAY)

    players_map = dict([(player.NAME, player)
                        for player in audiotools.player.AUDIO_OUTPUT])

    parser.add_option(
        '-o', '--output',
        action='store',
        dest='output',
        choices=[player.NAME for player in audiotools.player.AUDIO_OUTPUT
                 if player.available()],
        default=[player.NAME for player in audiotools.player.AUDIO_OUTPUT
                 if player.available()][0],
        help=_.OPT_OUTPUT_PLAY % \
            u", ".join([u"\"%s\"" % (player.NAME.decode('ascii'))
                        for player in audiotools.player.AUDIO_OUTPUT
                        if player.available()]))

    parser.add_option(
        '-T', '--track-replaygain',
        action='store_true',
        default=False,
        dest='track_replaygain',
        help=_.OPT_PLAYBACK_TRACK_GAIN)

    parser.add_option(
        '-A', '--album-replaygain',
        action='store_true',
        default=False,
        dest='album_replaygain',
        help=_.OPT_PLAYBACK_ALBUM_GAIN)

    parser.add_option(
        '--shuffle', action='store_true', dest='shuffle', default=False,
        help=_.OPT_SHUFFLE)

    parser.add_option(
        '-V', '--verbose',
        action='store',
        dest='verbosity',
        choices=audiotools.VERBOSITY_LEVELS,
        default=audiotools.DEFAULT_VERBOSITY,
        help=_.OPT_VERBOSE)

    (options, args) = parser.parse_args()
    msg = audiotools.Messenger("trackplay", options)

    if (options.interactive and (not interactive_available)):
        msg.error(_.ERR_URWID_REQUIRED)
        msg.output(_.ERR_GET_URWID1)
        msg.output(_.ERR_GET_URWID2)
        sys.exit(1)

    audiofiles = audiotools.open_files(args, sorted=False, messenger=msg)
    if (options.shuffle):
        import random

        random.shuffle(audiofiles)

    if (options.track_replaygain):
        replay_gain = audiotools.player.RG_TRACK_GAIN
    elif (options.album_replaygain):
        replay_gain = audiotools.player.RG_ALBUM_GAIN
    else:
        replay_gain = audiotools.player.RG_NO_REPLAYGAIN

    if (options.interactive):
        trackplay = TrackplayGUI(track_list=audiofiles,
                                 audio_output=players_map[options.output](),
                                 replay_gain=replay_gain)

        if (len(audiofiles) > 0):
            trackplay.select_track(None, True,
                                   (audiofiles[0],
                                    audiofiles[0].get_metadata()), False)

        loop = urwid.MainLoop(trackplay,
                              [('header', 'default,bold', 'default', ''),
                               ('pg normal', 'white', 'black', 'standout'),
                               ('pg complete', 'white', 'dark blue'),
                               ('pg smooth', 'dark blue', 'black')],
                              unhandled_input=trackplay.handle_text)

        loop.set_alarm_at(tm=time.time() + 1,
                          callback=audiotools.ui.timer,
                          user_data=trackplay)

        try:
            loop.run()
        except termios.error:
            msg.error(_.ERR_TERMIOS_ERROR)
            msg.info(_.ERR_TERMIOS_SUGGESTION)
            sys.exit(1)
    else:
        try:
            original_terminal_settings = termios.tcgetattr(0)
        except termios.error:
            msg.error(_.ERR_TERMIOS_ERROR)
            msg.info(_.ERR_TERMIOS_SUGGESTION)
            sys.exit(1)

        trackplay = TrackplayTTY(track_list=audiofiles,
                                 audio_output=players_map[options.output](),
                                 replay_gain=replay_gain)
        trackplay.play()
        output_line_len = 0

        try:
            tty.setcbreak(sys.stdin.fileno())
            while (trackplay.current_track is not None):
                (frames_sent, frames_total) = trackplay.progress()
                output_line = trackplay.progress_line()
                msg.ansi_clearline()
                if (len(output_line) > output_line_len):
                    output_line_len = len(output_line)
                    msg.partial_output(output_line)
                else:
                    msg.partial_output(output_line +
                                       (u" " * (output_line_len -
                                                len(output_line))))

                (r_list, w_list, x_list) = select.select([sys.stdin.fileno()],
                                                         [], [], 1)
                if (len(r_list) > 0):
                    char = os.read(sys.stdin.fileno(), 1)
                    if ((char == 'q') or
                        (char == 'Q') or
                        (char == '\x1B')):
                        trackplay.quit()
                    elif (char == ' '):
                        trackplay.toggle_play_pause()
                    elif ((char == 'n') or
                          (char == 'N')):
                        trackplay.next_track()
                    elif ((char == 'p') or
                          (char == 'P')):
                        trackplay.previous_track()
                    elif ((char == 's') or
                          (char == 'S')):
                        trackplay.stop()
                    else:
                        pass

            msg.ansi_clearline()
        finally:
            termios.tcsetattr(0, termios.TCSADRAIN, original_terminal_settings)
