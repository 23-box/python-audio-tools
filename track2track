#!/usr/bin/python

#Audio Tools, a module and set of tools for manipulating audio data
#Copyright (C) 2007-2011  Brian Langenberger

#This program is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2 of the License, or
#(at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA


import audiotools
import sys
import os
import os.path
import select
import gettext
import cPickle

gettext.install("audiotools", unicode=True)

MAX_CPUS = audiotools.MAX_JOBS


class ConversionComplete(Exception):
    pass

class track_converter:
    def __init__(self, messenger, progress_display):
        self.queued_jobs = []
        self.max_job_id = 0
        self.running_job_pool = {}
        self.messenger = messenger
        self.progress_display = progress_display
        self.converted_files = []
        self.errors = 0

    def queue(self, source_audiofile, destination_filename,
              destination_class, compression, metadata, thumbnail_images):
        self.queued_jobs.append((self.max_job_id,
                                 source_audiofile,
                                 destination_filename,
                                 destination_class,
                                 compression,
                                 metadata,
                                 thumbnail_images))
        self.max_job_id += 1

    def run_next_job(self):
        args = self.queued_jobs.pop(0)
        job_id = args[0]
        job = conversion_job.spawn(convert, args)
        self.progress_display.add_row(
            job_id,
            self.messenger.filename(args[1].filename),
            self.messenger.filename(args[2]))
        self.running_job_pool[job_id] = job

    def job_completed(self, job_id):
        self.running_job_pool[job_id].join()
        del(self.running_job_pool[job_id])
        self.progress_display.delete_row(job_id)
        if (len(self.queued_jobs) > 0):
            self.run_next_job()
        elif (len(self.running_job_pool) == 0):
            raise ConversionComplete()

    def success(self, source_filename, target_filename):
        self.converted_files.append(audiotools.open(target_filename))
        self.progress_display.clear()
        self.messenger.info(
            _(u"%(source)s -> %(destination)s") %
            {"source":self.messenger.filename(source_filename),
             "destination":self.messenger.filename(target_filename)})

    def error(self, message):
        self.errors += 1
        self.messenger.error(message)

    def progress(self, job_id, current, total):
        self.progress_display.update_row(job_id, current, total)

    def run(self, max_processes):
        #start up to "max_processes" number of subprocesses
        for i in xrange(min(max_processes, len(self.queued_jobs))):
            self.run_next_job()

        try:
            while (True):
                (rlist,
                 wlist,
                 xlist) = select.select([job.output for job in
                                         self.running_job_pool.values()],
                                        [], [])
                for reader in rlist:
                    (command, args) = cPickle.load(reader)
                    getattr(self, command)(*args)
        except ConversionComplete:
            return

class conversion_job:
    def __init__(self, pid, output):
        self.pid = pid
        self.output = output

    def join(self):
        self.output.close()
        return os.waitpid(self.pid, 0)

    @classmethod
    def spawn(cls, function, args):
        (read_end, write_end) = os.pipe()
        pid = os.fork()
        if (pid > 0):
            os.close(write_end)
            return cls(pid, os.fdopen(read_end, 'rb'))
        else:
            os.close(read_end)
            function(*((__pipe_writer__(write_end), ) + args))
            sys.exit(0)

class __pipe_writer__:
    def __init__(self, fd):
        self.output = os.fdopen(fd, "wb")

    def put(self, args):
        cPickle.dump(args, self.output, cPickle.HIGHEST_PROTOCOL)
        self.output.flush()

class __progress__:
    def __init__(self, output, job_id):
        self.output = output
        self.job_id = job_id

    def update(self, current, total):
        self.output.put(("progress", [self.job_id, current, total]))

def convert(output, job_id,
            source_audiofile,
            destination_filename, destination_class, compression,
            metadata, thumbnail_images):
    filename = audiotools.VerboseMessenger("").filename

    try:
        try:
            destination_audiofile = source_audiofile.convert(
                destination_filename,
                destination_class,
                compression,
                __progress__(output, job_id).update)

            if (metadata is not None):
                if (thumbnail_images):
                    for img in metadata.images():
                        metadata.delete_image(img)
                        metadata.add_image(img.thumbnail(
                                audiotools.THUMBNAIL_SIZE,
                                audiotools.THUMBNAIL_SIZE,
                                audiotools.THUMBNAIL_FORMAT))

                destination_audiofile.set_metadata(metadata)
            else:
                destination_audiofile.set_metadata(audiotools.MetaData(
                        track_number=source_audiofile.track_number(),
                        album_number=source_audiofile.album_number()))

            existing_cuesheet = source_audiofile.get_cuesheet()
            if (existing_cuesheet is not None):
                destination_audiofile.set_cuesheet(existing_cuesheet)
            output.put(("success", [source_audiofile.filename,
                                    destination_audiofile.filename]))
        except audiotools.UnsupportedChannelMask:
            output.put(
                ("error",
                 [_(u"Unable to write \"%(target_filename)s\"" +
                    u" with channel assignment from \"%(source_filename)s\"") %
                  {"target_filename":filename(destination_filename),
                   "source_filename":filename(source_audiofile.filename)}]))
        except audiotools.UnsupportedChannelCount:
            output.put(
                ("error",
                 [_(u"Unable to write \"%(target_filename)s\"" +
                    u" with %(channels)d channel input") %
                  {"target_filename":filename(destination_filename),
                   "channels":source_audiofile.channels()}]))
        except audiotools.UnsupportedBitsPerSample:
            output.put(
                ("error",
                 [_(u"Unable to write \"%(target_filename)s\"" +
                    u" with %(bps)d bits per sample") %
                  {"target_filename":filename(destination_filename),
                   "bps":source_audiofile.bits_per_sample()}]))
        except audiotools.EncodingError, msg:
            output.put(
                ("error",
                 [_(u"%(filename)s: %(error)s") %
                  {"filename":filename(destination_filename),
                   "error":msg}]))
        except audiotools.InvalidFormat, msg:
            output.put(("error", [unicode(msg)]))
        except Exception, msg:
            output.put(("error", [unicode(msg)]))
    finally:
        output.put(("job_completed", [job_id]))


if (__name__ == '__main__'):
    parser = audiotools.OptionParser(
        usage=_(u'%prog [options] <track 1> [track 2] ...'),
        version="Python Audio Tools %s" % (audiotools.VERSION))

    conversion = audiotools.OptionGroup(parser, _(u"Conversion Options"))

    conversion.add_option(
        '-t', '--type',
        action='store',
        dest='type',
        choices=audiotools.TYPE_MAP.keys(),
        help=_(u'the type of audio track to convert to'))

    conversion.add_option(
        '-q', '--quality',
        action='store',
        type='string',
        dest='quality',
        help=_(u'the quality to store audio tracks at'))

    conversion.add_option(
        '-d', '--dir',
        action='store',
        type='string',
        dest='dir',
        default='.',
        help=_(u'the directory to store converted audio tracks'))

    conversion.add_option(
        '--format',
        action='store',
        type='string',
        default=None,
        dest='format',
        help=_(u'the format string for new filenames'))

    conversion.add_option(
        '-o', '--output',
        action='store',
        dest='output',
        help=_(u'output filename to use, overriding default and -d'))

    conversion.add_option(
        '-j', '--joint',
        action='store',
        type='int',
        default=MAX_CPUS,
        dest='max_processes',
        help=_(u'the maximum number of processes to run at a time'))

    parser.add_option_group(conversion)

    metadata = audiotools.OptionGroup(parser, _(u"Metadata Options"))

    metadata.add_option(
        '-x', '--xmcd',
        action='store',
        type='string',
        dest='xmcd',
        metavar='FILENAME',
        help=_(u'FreeDB XMCD file or MusicBrainz XML file'))

    metadata.add_option(
        '-T', '--thumbnail',
        action='store_true',
        default=False,
        dest='thumbnail',
        help=_(u'convert embedded images to smaller thumbnails ' +
               u'during conversion'))

    #if adding ReplayGain is a lossless process
    #(i.e. added as tags rather than modifying track data)
    #add_replay_gain should default to True
    #if not, add_replay_gain should default to False
    #which is which depends on the track type
    metadata.add_option(
        '--replay-gain',
        action='store_true',
        dest='add_replay_gain',
        help=_(u'add ReplayGain metadata to newly created tracks'))

    metadata.add_option(
        '--no-replay-gain',
        action='store_false',
        dest='add_replay_gain',
        help=_(u'do not add ReplayGain metadata to newly created tracks'))

    parser.add_option_group(metadata)

    parser.add_option(
        '-V', '--verbose',
        action='store',
        dest='verbosity',
        choices=audiotools.VERBOSITY_LEVELS,
        default=audiotools.DEFAULT_VERBOSITY,
        help=_(u'the verbosity level to execute at'))

    (options, args) = parser.parse_args()
    msg = audiotools.Messenger("track2track", options)

    #if one specifies incompatible output options,
    #complain about it right away
    if (options.output is not None):
        if (options.dir != "."):
            msg.error(_(u"-o and -d options are not compatible"))
            msg.info(_(u"Please specify either -o or -d but not both"))
            sys.exit(1)

        if (options.format is not None):
            msg.warning(_(u"--format has no effect when used with -o"))

    #get the AudioFile class we are converted to
    if (options.output is None):
        if (options.type is not None):
            AudioType = audiotools.TYPE_MAP[options.type]
        else:
            AudioType = audiotools.TYPE_MAP[audiotools.DEFAULT_TYPE]
    else:
        if (options.type is not None):
            AudioType = audiotools.TYPE_MAP[options.type]
        else:
            try:
                AudioType = audiotools.filename_to_type(options.output)
            except audiotools.UnknownAudioType, exp:
                exp.error_msg(msg)
                sys.exit(1)

    #ensure the selected compression is compatible with that class
    if (options.quality == 'help'):
        if (len(AudioType.COMPRESSION_MODES) > 1):
            msg.info(_(u"Available compression types for %s:") % \
                           (AudioType.NAME))
            for mode in AudioType.COMPRESSION_MODES:
                msg.new_row()
                if (mode == audiotools.__default_quality__(AudioType.NAME)):
                    msg.output_column(msg.ansi(mode.decode('ascii'),
                                               [msg.BOLD,
                                                msg.UNDERLINE]), True)
                else:
                    msg.output_column(mode.decode('ascii'), True)
                if (mode in AudioType.COMPRESSION_DESCRIPTIONS):
                    msg.output_column(u" : ")
                else:
                    msg.output_column(u"   ")
                msg.output_column(
                    AudioType.COMPRESSION_DESCRIPTIONS.get(mode, u""))
            msg.info_rows()
        else:
            msg.error(_(u"Audio type %s has no compression modes") % \
                            (AudioType.NAME))
        sys.exit(0)
    elif (options.quality is None):
        options.quality = audiotools.__default_quality__(AudioType.NAME)
    elif (options.quality not in AudioType.COMPRESSION_MODES):
        msg.error(
            _(u"\"%(quality)s\" is not a supported " +
              u"compression mode for type \"%(type)s\"") %
            {"quality": options.quality,
             "type": AudioType.NAME})
        sys.exit(1)

    #grab the list of AudioFile objects we are converting from
    audiofiles = audiotools.open_files(args, messenger=msg)
    if (len(audiofiles) < 1):
        msg.error(_(u"You must specify at least 1 supported audio file"))
        sys.exit(1)

    if (options.max_processes < 1):
        msg.error(_(u'You must run at least 1 process at a time'))
        sys.exit(1)

    if ((options.output is not None) and
        (len(audiofiles) != 1)):
        msg.error(_(u'You may specify only 1 input file for use with -o'))
        sys.exit(1)

    #determine whether to add ReplayGain by default
    if (options.add_replay_gain is None):
        options.add_replay_gain = (
            AudioType.lossless_replay_gain() and
            audiotools.applicable_replay_gain(audiofiles))

    #if we're using an XMCD/XML file, use that file for MetaData
    if (options.xmcd is not None):
        try:
            xmcd = audiotools.read_metadata_file(options.xmcd)
        except audiotools.MetaDataFileException, err:
            msg.error(unicode(err))
            sys.exit(1)
    else:
        #if we're not using an XMCD file, use the AudioFile objects' data
        xmcd = None

    if (options.thumbnail):
        if (not audiotools.can_thumbnail()):
            msg.error(_(u"Unable to generate thumbnails"))
            msg.info(
                _(u"Please install the Python Imaging Library"))
            msg.info(
                _(u"available at http://www.pythonware.com/products/pil/"))
            msg.info(_(u"to enable image resizing"))
            sys.exit(1)

        if (audiotools.THUMBNAIL_FORMAT.upper() not in
            audiotools.thumbnail_formats()):
            msg.error(_(u"Unsupported thumbnail format \"%s\"") %
                      (audiotools.THUMBNAIL_FORMAT))
            msg.info(_(u"Available formats are: %s") %
                     (", ".join(audiotools.thumbnail_formats())))
            sys.exit(1)

    quality = options.quality
    max_processes = options.max_processes

    if (options.output is None):
        #the default encoding method, without an output file

        base_directory = options.dir

        converter = track_converter(
            msg, audiotools.ProgressDisplay(msg, u" -> "))

        for audiofile in audiofiles:
            try:
                track_number = audiofile.track_number()

                if (xmcd is not None):
                    track_metadata = audiofile.get_metadata()
                    if (track_metadata is not None):
                        xmcd_metadata = track_metadata.__class__.converted(
                            xmcd.get(track_number, None))
                        xmcd_metadata.merge(track_metadata)
                        metadata = xmcd_metadata
                    else:
                        metadata = xmcd.get(track_number, None)

                    filename = os.path.join(
                                base_directory,
                                AudioType.track_name(
                            file_path=audiofile.filename,
                            track_metadata=metadata,
                            format=options.format))

                    try:
                        audiotools.make_dirs(filename)
                    except OSError:
                        msg.error(_(u"Unable to write \"%s\"") % \
                                      (filename))
                        sys.exit(1)

                    converter.queue(source_audiofile=audiofile,
                                    destination_filename=filename,
                                    destination_class=AudioType,
                                    compression=quality,
                                    metadata=metadata,
                                    thumbnail_images=options.thumbnail)
                else:
                    metadata = audiofile.get_metadata()

                    filename = os.path.join(
                                base_directory,
                                AudioType.track_name(
                            file_path=audiofile.filename,
                            track_metadata=metadata,
                            format=options.format))

                    try:
                        audiotools.make_dirs(filename)
                    except OSError:
                        msg.error(_(u"Unable to write \"%s\"") % \
                                      (filename))
                        sys.exit(1)

                    converter.queue(source_audiofile=audiofile,
                                    destination_filename=filename,
                                    destination_class=AudioType,
                                    compression=quality,
                                    metadata=metadata,
                                    thumbnail_images=options.thumbnail)
            except audiotools.UnsupportedTracknameField, err:
                err.error_msg(msg)
                sys.exit(1)
            except KeyError:
                continue

        converter.run(max_processes)

        if (converter.errors > 0):
            sys.exit(1)

        if (options.add_replay_gain and AudioType.can_add_replay_gain()):
            rg_progress = audiotools.ReplayGainProgressDisplay(
                msg, AudioType.lossless_replay_gain())
            rg_progress.initial_message()
            try:
                #separate encoded files by album_name and album_number
                for album in audiotools.group_tracks(
                    converter.converted_files):
                    #add ReplayGain to groups of files
                    #belonging to the same album

                    AudioType.add_replay_gain([a.filename for a in album],
                                              rg_progress.update)
            except ValueError, err:
                rg_progress.clear()
                msg.error(unicode(err))
                sys.exit(1)
            rg_progress.final_message()
    else:
        #encoding only a single file
        audiofile = audiofiles[0]

        if (xmcd is not None):
            track_metadata = audiofile.get_metadata()
            if (track_metadata is not None):
                xmcd_metadata = track_metadata.__class__.converted(
                    xmcd.get(audiofile.track_number(), None))
                xmcd_metadata.merge(track_metadata)
                metadata = xmcd_metadata
            else:
                metadata = xmcd.get(audiofile.track_number(), None)
        else:
            metadata = audiofile.get_metadata()

        msg = audiotools.SilentMessenger("track2track")

        converter = track_converter(
            msg, audiotools.SilentProgressDisplay(msg, u" -> "))
        converter.queue(source_audiofile=audiofile,
                        destination_filename=options.output,
                        destination_class=AudioType,
                        compression=quality,
                        metadata=metadata,
                        thumbnail_images=options.thumbnail)
        converter.run(1)
        if (converter.errors > 0):
            sys.exit(1)
