#!/usr/bin/python

#Audio Tools, a module and set of tools for manipulating audio data
#Copyright (C) 2007-2009  Brian Langenberger

#This program is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2 of the License, or
#(at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA


import sys
import os
import os.path
import audiotools
import gettext

gettext.install("audiotools",unicode=True)

if (__name__ == '__main__'):
    parser = audiotools.OptionParser(
        '%prog [-x XMCD file] [options] <track 1> [track 2] ...',
        version="Python Audio Tools %s" % (audiotools.VERSION))
    parser.add_option('-x','--xmcd',action='store',
                      type='string',dest='xmcd',default='-')
    parser.add_option('-s','--freedb-server',action='store',
                      type='string',dest='freedb_server',
                      default=audiotools.FREEDB_SERVER)
    parser.add_option('-p','--freedb-port',action='store',
                      type='int',dest='freedb_port',
                      default=audiotools.FREEDB_PORT)
    parser.add_option('-m','--metadata',action='store_true',
                      dest='metadata',default=False)

    parser.add_option('-i','--id',dest='discid',
                      action='store_true',default=False,
                      help=_(u'display disc ID rather than fetch XMCD data'))

    parser.add_option('-D','--default',
                      action='store_const',const=1,default=None,
                      help=_(u'when multiple choices are available, select the first one automatically'))

    parser.add_option('-V','--verbose',
                      action='store',
                      dest='verbosity',
                      choices=["quiet","normal","debug"],
                      default="normal",
                      help=_(u'the verbosity level to execute at'))

    (options,args) = parser.parse_args()
    msg = audiotools.Messenger("track2xmcd",options)

    audiofiles = audiotools.open_files(args)

    if (len(audiofiles) < 1):
        msg.error(_(u"You must specify at least 1 supported audio file"))
        sys.exit(1)

    if (options.xmcd == '-'):
        outfile = sys.stdout
    else:
        try:
            if (not os.path.isfile(options.xmcd)):
                outfile = file(options.xmcd,"w")
            else:
                msg.error(_(u"Refusing to overwrite \"%s\"") % \
                              (msg.filename(options.xmcd)))
                sys.exit(1)
        except IOError,e:
            msg.error(unicode(e))
            sys.exit(1)

    if (options.discid):      #calculate the disc ID and do nothing else
        if ((len(audiofiles) == 1) and
            (audiofiles[0].get_cuesheet() is not None)):
            file = audiofiles[0]
            discid = audiotools.DiscID([(length * 75) / file.sample_rate()
                                        for length in
                                        file.get_cuesheet().pcm_lengths(
                        file.total_frames())])
        else:
            discid = audiotools.DiscID([file.cd_frames()
                                        for file in audiofiles])
        msg.output(discid.freedb_id().decode('ascii'))
    elif (options.metadata):  #pull XMCD data from AudioFile metadata
        if ((len(audiofiles) == 1) and
            (audiofiles[0].get_cuesheet() is not None)):
            outfile.write(audiotools.XMCD.from_cuesheet(
                    audiofiles[0].get_cuesheet(),
                    audiofiles[0].total_frames(),
                    audiofiles[0].sample_rate(),
                    audiofiles[0].get_metadata()).build())
        else:
            outfile.write(audiotools.XMCD.from_files(audiofiles).build())
    else:                     #grab XMCD data from FreeDB
        if ((len(audiofiles) == 1) and
            (audiofiles[0].get_cuesheet() is not None)):
            file = audiofiles[0]
            discid = audiotools.DiscID([(length * 75) / file.sample_rate()
                                        for length in
                                        file.get_cuesheet().pcm_lengths(
                        file.total_frames())])
        else:
            discid = audiotools.DiscID([file.cd_frames()
                                        for file in audiofiles])

        try:
            audiotools.get_xmcd(discid, outfile,
                                options.freedb_server,
                                options.freedb_port,
                                msg,
                                options.default)
        except IOError,e:
            msg.error(unicode(e))
            sys.exit(1)

    outfile.close()
